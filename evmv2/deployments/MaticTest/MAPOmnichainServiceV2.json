{
  "address": "0x2214144fF2906b9f44F350368B76972b07f4f75e",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_token",
          "type": "address[]"
        }
      ],
      "name": "AddMintableToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum MAPOmnichainServiceV2.chainType",
          "name": "_type",
          "type": "uint8"
        }
      ],
      "name": "RegisterChain",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_toChain",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_enable",
          "type": "bool"
        }
      ],
      "name": "RegisterToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_token",
          "type": "address[]"
        }
      ],
      "name": "RemoveMintableToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_newRouter",
          "type": "address"
        }
      ],
      "name": "SetButterRouterAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_lightNode",
          "type": "address"
        }
      ],
      "name": "SetLightClient",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_relay",
          "type": "address"
        }
      ],
      "name": "SetRelayContract",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fromChain",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "toChain",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "orderId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "from",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mapDepositOut",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fromChain",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "toChain",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        }
      ],
      "name": "mapSwapExecute",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fromChain",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "toChain",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "orderId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "from",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "toAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "name": "mapSwapIn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fromChain",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "toChain",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "orderId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "token",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "from",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "to",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "swapData",
          "type": "bytes"
        }
      ],
      "name": "mapSwapOut",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fromChain",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "toChain",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        }
      ],
      "name": "mapTransferExecute",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fromChain",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "toChain",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "orderId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "token",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "from",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "to",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "toChainToken",
          "type": "bytes"
        }
      ],
      "name": "mapTransferOut",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_token",
          "type": "address[]"
        }
      ],
      "name": "addMintableToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "butterRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "changeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "depositNative",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lightNode",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_toChain",
          "type": "uint256"
        }
      ],
      "name": "isBridgeable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "isMintable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lightNode",
      "outputs": [
        {
          "internalType": "contract ILightNode",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "mintableTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "orderList",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_toChain",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_enable",
          "type": "bool"
        }
      ],
      "name": "registerToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "relayChainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "relayContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_token",
          "type": "address[]"
        }
      ],
      "name": "removeMintableToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "selfChainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_butterRouter",
          "type": "address"
        }
      ],
      "name": "setButterRouterAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lightNode",
          "type": "address"
        }
      ],
      "name": "setLightClient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_relay",
          "type": "address"
        }
      ],
      "name": "setRelayContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setUnpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_receiptProof",
          "type": "bytes"
        }
      ],
      "name": "swapIn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_initiatorAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_to",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_toChain",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_swapData",
          "type": "bytes"
        }
      ],
      "name": "swapOutNative",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "orderId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_initiatorAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_to",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_toChain",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_swapData",
          "type": "bytes"
        }
      ],
      "name": "swapOutToken",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "orderId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenMappingList",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x9975c5005fd0ef39f501c15ea5c10f87ca0efbddde4558a3a8e1f5bb429f1e5d",
  "receipt": {
    "to": null,
    "from": "0xE796bc0Ef665D5F730408a55AA0FF4e6f8B90920",
    "contractAddress": "0x2214144fF2906b9f44F350368B76972b07f4f75e",
    "transactionIndex": 23,
    "gasUsed": "3506545",
    "logsBloom": "0x
    "blockHash": "0x1da4ab5efbd3ae20486792bd17591161143c365ea025fe86c5c97a81956496c8",
    "transactionHash": "0x9975c5005fd0ef39f501c15ea5c10f87ca0efbddde4558a3a8e1f5bb429f1e5d",
    "logs": [
      {
        "transactionIndex": 23,
        "blockNumber": 39987323,
        "transactionHash": "0x9975c5005fd0ef39f501c15ea5c10f87ca0efbddde4558a3a8e1f5bb429f1e5d",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000e796bc0ef665d5f730408a55aa0ff4e6f8b90920",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000012afc6b1abbf00000000000000000000000000000000000000000000000000094059c3781bab990000000000000000000000000000000000000000000034507d40025841bac8fc000000000000000000000000000000000000000000000000092da9fcc66fec990000000000000000000000000000000000000000000034507d52b21ef36687fc",
        "logIndex": 169,
        "blockHash": "0x1da4ab5efbd3ae20486792bd17591161143c365ea025fe86c5c97a81956496c8"
      }
    ],
    "blockNumber": 39987323,
    "cumulativeGasUsed": "9462701",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "f0a3e348df507d3c5e995f9bac9c3cdb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_token\",\"type\":\"address[]\"}],\"name\":\"AddMintableToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum MAPOmnichainServiceV2.chainType\",\"name\":\"_type\",\"type\":\"uint8\"}],\"name\":\"RegisterChain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toChain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"RegisterToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_token\",\"type\":\"address[]\"}],\"name\":\"RemoveMintableToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newRouter\",\"type\":\"address\"}],\"name\":\"SetButterRouterAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_lightNode\",\"type\":\"address\"}],\"name\":\"SetLightClient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_relay\",\"type\":\"address\"}],\"name\":\"SetRelayContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromChain\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"from\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mapDepositOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromChain\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"mapSwapExecute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromChain\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"from\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"mapSwapIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromChain\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"token\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"from\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"to\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"swapData\",\"type\":\"bytes\"}],\"name\":\"mapSwapOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromChain\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"mapTransferExecute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromChain\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"token\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"from\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"to\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"toChainToken\",\"type\":\"bytes\"}],\"name\":\"mapTransferOut\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_token\",\"type\":\"address[]\"}],\"name\":\"addMintableToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"butterRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"depositNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lightNode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_toChain\",\"type\":\"uint256\"}],\"name\":\"isBridgeable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isMintable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lightNode\",\"outputs\":[{\"internalType\":\"contract ILightNode\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintableTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"orderList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_toChain\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"registerToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relayChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relayContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_token\",\"type\":\"address[]\"}],\"name\":\"removeMintableToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"selfChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_butterRouter\",\"type\":\"address\"}],\"name\":\"setButterRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lightNode\",\"type\":\"address\"}],\"name\":\"setLightClient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_relay\",\"type\":\"address\"}],\"name\":\"setRelayContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setUnpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_receiptProof\",\"type\":\"bytes\"}],\"name\":\"swapIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_initiatorAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_to\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_toChain\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_swapData\",\"type\":\"bytes\"}],\"name\":\"swapOutNative\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_initiatorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_to\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toChain\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_swapData\",\"type\":\"bytes\"}],\"name\":\"swapOutToken\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenMappingList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MAPOmnichainServiceV2.sol\":\"MAPOmnichainServiceV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@mapprotocol/protocol/contracts/interface/ILightNode.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface ILightNode {\\n    function verifyProofData(bytes memory _receiptProof) external view returns (bool success, string memory message, bytes memory logs);\\n\\n    function updateBlockHeader(bytes memory _blockHeader) external;\\n\\n    function updateLightClient(bytes memory _data) external;\\n\\n    function clientState() external view returns(bytes memory);\\n\\n    function headerHeight() external view returns (uint256 height);\\n\\n    function verifiableHeaderRange() external view returns (uint256, uint256);\\n}\",\"keccak256\":\"0xfc7b0d084fe5f3cb1890b3c69fe6d28ac8b2dd7d5bcdbcdcea3efdbe491f2c1d\",\"license\":\"MIT\"},\"@mapprotocol/protocol/contracts/lib/RLPReader.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/*\\n * @author Hamdi Allam hamdi.allam97@gmail.com\\n * Please reach out with any questions or concerns\\n */\\npragma solidity ^0.8.0;\\n\\nlibrary RLPReader {\\n    uint8 constant STRING_SHORT_START = 0x80;\\n    uint8 constant STRING_LONG_START = 0xb8;\\n    uint8 constant LIST_SHORT_START = 0xc0;\\n    uint8 constant LIST_LONG_START = 0xf8;\\n    uint8 constant WORD_SIZE = 32;\\n\\n    struct RLPItem {\\n        uint256 len;\\n        uint256 memPtr;\\n    }\\n\\n    struct Iterator {\\n        RLPItem item; // Item that's being iterated over.\\n        uint256 nextPtr; // Position of the next item in the list.\\n    }\\n\\n    /*\\n     * @dev Returns the next element in the iteration. Reverts if it has not next element.\\n     * @param self The iterator.\\n     * @return The next element in the iteration.\\n     */\\n    function next(Iterator memory self) internal pure returns (RLPItem memory) {\\n        require(hasNext(self), \\\"not have next\\\");\\n\\n        uint256 ptr = self.nextPtr;\\n        uint256 itemLength = _itemLength(ptr);\\n        self.nextPtr = ptr + itemLength;\\n\\n        return RLPItem(itemLength, ptr);\\n    }\\n\\n    /*\\n     * @dev Returns true if the iteration has more elements.\\n     * @param self The iterator.\\n     * @return true if the iteration has more elements.\\n     */\\n    function hasNext(Iterator memory self) internal pure returns (bool) {\\n        RLPItem memory item = self.item;\\n        return self.nextPtr < item.memPtr + item.len;\\n    }\\n\\n    /*\\n     * @param item RLP encoded bytes\\n     */\\n    function toRlpItem(bytes memory item)\\n    internal\\n    pure\\n    returns (RLPItem memory)\\n    {\\n        uint256 memPtr;\\n        assembly {\\n            memPtr := add(item, 0x20)\\n        }\\n\\n        return RLPItem(item.length, memPtr);\\n    }\\n\\n    /*\\n     * @dev Create an iterator. Reverts if item is not a list.\\n     * @param self The RLP item.\\n     * @return An 'Iterator' over the item.\\n     */\\n    function iterator(RLPItem memory self)\\n    internal\\n    pure\\n    returns (Iterator memory)\\n    {\\n        require(isList(self), \\\"check self list fail\\\");\\n\\n        uint256 ptr = self.memPtr + _payloadOffset(self.memPtr);\\n        return Iterator(self, ptr);\\n    }\\n\\n    /*\\n     * @param the RLP item.\\n     */\\n    function rlpLen(RLPItem memory item) internal pure returns (uint256) {\\n        return item.len;\\n    }\\n\\n    /*\\n     * @param the RLP item.\\n     * @return (memPtr, len) pair: location of the item's payload in memory.\\n     */\\n    function payloadLocation(RLPItem memory item)\\n    internal\\n    pure\\n    returns (uint256, uint256)\\n    {\\n        uint256 offset = _payloadOffset(item.memPtr);\\n        uint256 memPtr = item.memPtr + offset;\\n        uint256 len = item.len - offset;\\n        // data length\\n        return (memPtr, len);\\n    }\\n\\n    /*\\n     * @param the RLP item.\\n     */\\n    function payloadLen(RLPItem memory item) internal pure returns (uint256) {\\n        (, uint256 len) = payloadLocation(item);\\n        return len;\\n    }\\n\\n    /*\\n     * @param the RLP item containing the encoded list.\\n     */\\n    function toList(RLPItem memory item)\\n    internal\\n    pure\\n    returns (RLPItem[] memory)\\n    {\\n        require(isList(item), \\\"is list fail\\\");\\n\\n        uint256 items = numItems(item);\\n        RLPItem[] memory result = new RLPItem[](items);\\n\\n        uint256 memPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint256 dataLen;\\n        for (uint256 i = 0; i < items; i++) {\\n            dataLen = _itemLength(memPtr);\\n            result[i] = RLPItem(dataLen, memPtr);\\n            memPtr = memPtr + dataLen;\\n        }\\n\\n        return result;\\n    }\\n\\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\\n    function isList(RLPItem memory item) internal pure returns (bool) {\\n        if (item.len == 0) return false;\\n\\n        uint8 byte0;\\n        uint256 memPtr = item.memPtr;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < LIST_SHORT_START) return false;\\n        return true;\\n    }\\n\\n    /*\\n     * @dev A cheaper version of keccak256(toRlpBytes(item)) that avoids copying memory.\\n     * @return keccak256 hash of RLP encoded bytes.\\n     */\\n    function rlpBytesKeccak256(RLPItem memory item)\\n    internal\\n    pure\\n    returns (bytes32)\\n    {\\n        uint256 ptr = item.memPtr;\\n        uint256 len = item.len;\\n        bytes32 result;\\n        assembly {\\n            result := keccak256(ptr, len)\\n        }\\n        return result;\\n    }\\n\\n    /*\\n     * @dev A cheaper version of keccak256(toBytes(item)) that avoids copying memory.\\n     * @return keccak256 hash of the item payload.\\n     */\\n    function payloadKeccak256(RLPItem memory item)\\n    internal\\n    pure\\n    returns (bytes32)\\n    {\\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\\n        bytes32 result;\\n        assembly {\\n            result := keccak256(memPtr, len)\\n        }\\n        return result;\\n    }\\n\\n    /** RLPItem conversions into data types **/\\n\\n    // @returns raw rlp encoding in bytes\\n    function toRlpBytes(RLPItem memory item)\\n    internal\\n    pure\\n    returns (bytes memory)\\n    {\\n        bytes memory result = new bytes(item.len);\\n        if (result.length == 0) return result;\\n\\n        uint256 ptr;\\n        assembly {\\n            ptr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr, ptr, item.len);\\n        return result;\\n    }\\n\\n    // any non-zero byte except \\\"0x80\\\" is considered true\\n    function toBoolean(RLPItem memory item) internal pure returns (bool) {\\n        require(item.len == 1, \\\"item len is not one\\\");\\n        uint256 result;\\n        uint256 memPtr = item.memPtr;\\n        assembly {\\n            result := byte(0, mload(memPtr))\\n        }\\n\\n        // SEE Github Issue #5.\\n        // Summary: Most commonly used RLP libraries (i.e Geth) will encode\\n        // \\\"0\\\" as \\\"0x80\\\" instead of as \\\"0\\\". We handle this edge case explicitly\\n        // here.\\n        if (result == 0 || result == STRING_SHORT_START) {\\n            return false;\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    function toAddress(RLPItem memory item) internal pure returns (address) {\\n        // 1 byte for the length prefix\\n        require(item.len == 21, \\\"item len is not 21\\\");\\n\\n        return address(uint160(toUint(item)));\\n    }\\n\\n    function toUint(RLPItem memory item) internal pure returns (uint256) {\\n        require(item.len > 0 && item.len <= 33, \\\"item len is not uint\\\");\\n\\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\\n\\n        uint256 result;\\n        assembly {\\n            result := mload(memPtr)\\n\\n        // shfit to the correct location if neccesary\\n            if lt(len, 32) {\\n                result := div(result, exp(256, sub(32, len)))\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n    // enforces 32 byte length\\n    function toUintStrict(RLPItem memory item) internal pure returns (uint256) {\\n        // one byte prefix\\n        require(item.len == 33, \\\"item is not uint strict\\\");\\n\\n        uint256 result;\\n        uint256 memPtr = item.memPtr + 1;\\n        assembly {\\n            result := mload(memPtr)\\n        }\\n\\n        return result;\\n    }\\n\\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        require(item.len > 0, \\\"item len is zero\\\");\\n\\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\\n        bytes memory result = new bytes(len);\\n\\n        uint256 destPtr;\\n        assembly {\\n            destPtr := add(0x20, result)\\n        }\\n\\n        copy(memPtr, destPtr, len);\\n        return result;\\n    }\\n\\n    /*\\n     * Private Helpers\\n     */\\n\\n    // @return number of payload items inside an encoded list.\\n    function numItems(RLPItem memory item) internal pure returns (uint256) {\\n        if (item.len == 0) return 0;\\n\\n        uint256 count = 0;\\n        uint256 currPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint256 endPtr = item.memPtr + item.len;\\n        while (currPtr < endPtr) {\\n            currPtr = currPtr + _itemLength(currPtr);\\n            // skip over an item\\n            count++;\\n        }\\n\\n        return count;\\n    }\\n\\n    // @return entire rlp item byte length\\n    function _itemLength(uint256 memPtr) private pure returns (uint256) {\\n        uint256 itemLen;\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) itemLen = 1;\\n        else if (byte0 < STRING_LONG_START)\\n            itemLen = byte0 - STRING_SHORT_START + 1;\\n        else if (byte0 < LIST_SHORT_START) {\\n            assembly {\\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\\n                memPtr := add(memPtr, 1) // skip over the first byte\\n\\n            /* 32 byte word size */\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        } else if (byte0 < LIST_LONG_START) {\\n            itemLen = byte0 - LIST_SHORT_START + 1;\\n        } else {\\n            assembly {\\n                let byteLen := sub(byte0, 0xf7)\\n                memPtr := add(memPtr, 1)\\n\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        }\\n\\n        return itemLen;\\n    }\\n\\n    // @return number of bytes until the data\\n    function _payloadOffset(uint256 memPtr) private pure returns (uint256) {\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) return 0;\\n        else if (\\n            byte0 < STRING_LONG_START ||\\n            (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START)\\n        ) return 1;\\n        else if (byte0 < LIST_SHORT_START)\\n        // being explicit\\n            return byte0 - (STRING_LONG_START - 1) + 1;\\n        else return byte0 - (LIST_LONG_START - 1) + 1;\\n    }\\n\\n    /*\\n     * @param src Pointer to source\\n     * @param dest Pointer to destination\\n     * @param len Amount of memory to copy from the source\\n     */\\n    function copy(\\n        uint256 src,\\n        uint256 dest,\\n        uint256 len\\n    ) private pure {\\n        if (len == 0) return;\\n\\n        // copy as many word sizes as possible\\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += WORD_SIZE;\\n            dest += WORD_SIZE;\\n        }\\n\\n        if (len > 0) {\\n            // left over bytes. Mask is used to remove unwanted bytes from the word\\n            uint256 mask = 256 ** (WORD_SIZE - len) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask)) // zero out src\\n                let destpart := and(mload(dest), mask) // retrieve the bytes\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x39b810b4e66f244a397c1231c11adaa6de6615bb44e0bb22ef1b068fa6ba66ca\",\"license\":\"MIT\"},\"@mapprotocol/protocol/contracts/utils/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Utils {\\n    uint constant MIN_NEAR_ADDRESS_LEN = 2;\\n    uint constant MAX_NEAR_ADDRESS_LEN = 64;\\n\\n    function checkBytes(bytes memory b1, bytes memory b2) internal pure returns (bool){\\n        return keccak256(b1) == keccak256(b2);\\n    }\\n\\n    function fromBytes(bytes memory bys) internal pure returns (address addr){\\n        assembly {\\n            addr := mload(add(bys, 20))\\n        }\\n    }\\n\\n\\n    function toBytes(address self) internal pure returns (bytes memory b) {\\n        b = abi.encodePacked(self);\\n    }\\n\\n    function splitExtra(bytes memory extra)\\n    internal\\n    pure\\n    returns (bytes memory newExtra){\\n        require(extra.length >= 64, \\\"Invalid extra result type\\\");\\n        newExtra = new bytes(64);\\n        for (uint256 i = 0; i < 64; i++) {\\n            newExtra[i] = extra[i];\\n        }\\n    }\\n\\n\\n    function hexStrToBytes(bytes memory _hexStr)\\n    internal\\n    pure\\n    returns (bytes memory)\\n    {\\n        //Check hex string is valid\\n        if (\\n            _hexStr.length % 2 != 0 ||\\n            _hexStr.length < 4\\n        ) {\\n            revert(\\\"hexStrToBytes: invalid input\\\");\\n        }\\n\\n        bytes memory bytes_array = new bytes(_hexStr.length / 2 - 32);\\n\\n        for (uint256 i = 64; i < _hexStr.length; i += 2) {\\n            uint8 tetrad1 = 16;\\n            uint8 tetrad2 = 16;\\n\\n            //left digit\\n            if (\\n                uint8(_hexStr[i]) >= 48 && uint8(_hexStr[i]) <= 57\\n            ) tetrad1 = uint8(_hexStr[i]) - 48;\\n\\n            //right digit\\n            if (\\n                uint8(_hexStr[i + 1]) >= 48 &&\\n                uint8(_hexStr[i + 1]) <= 57\\n            ) tetrad2 = uint8(_hexStr[i + 1]) - 48;\\n\\n            //left A->F\\n            if (\\n                uint8(_hexStr[i]) >= 65 && uint8(_hexStr[i]) <= 70\\n            ) tetrad1 = uint8(_hexStr[i]) - 65 + 10;\\n\\n            //right A->F\\n            if (\\n                uint8(_hexStr[i + 1]) >= 65 &&\\n                uint8(_hexStr[i + 1]) <= 70\\n            ) tetrad2 = uint8(_hexStr[i + 1]) - 65 + 10;\\n\\n            //left a->f\\n            if (\\n                uint8(_hexStr[i]) >= 97 &&\\n                uint8(_hexStr[i]) <= 102\\n            ) tetrad1 = uint8(_hexStr[i]) - 97 + 10;\\n\\n            //right a->f\\n            if (\\n                uint8(_hexStr[i + 1]) >= 97 &&\\n                uint8(_hexStr[i + 1]) <= 102\\n            ) tetrad2 = uint8(_hexStr[i + 1]) - 97 + 10;\\n\\n            //Check all symbols are allowed\\n            if (tetrad1 == 16 || tetrad2 == 16)\\n                revert(\\\"hexStrToBytes: invalid input\\\");\\n\\n            bytes_array[i / 2 - 32] = bytes1(16 * tetrad1 + tetrad2);\\n        }\\n\\n        return bytes_array;\\n    }\\n\\n\\n    function isValidNearAddress(bytes memory _addr) internal pure returns (bool){\\n        if (_addr.length < MIN_NEAR_ADDRESS_LEN || _addr.length > MAX_NEAR_ADDRESS_LEN) {\\n            return false;\\n        }\\n        bool last_char_is_separator = true;\\n        for (uint i = 0; i < _addr.length; i++) {\\n            uint8 char = uint8(_addr[i]);\\n            bool current_char_is_separator = false;\\n\\n            //char 97-122 is a-z, 48-57 is 0-9 , 45 is - ,46 is .,95 is _\\n            if ((char >= 97 && char <= 122) || (char >= 48 && char <= 57) || (char == 45 || char == 46 || char == 95)) {\\n                if ((char == 45 || char == 46 || char == 95)) {\\n                    current_char_is_separator = true;\\n                }\\n            } else {\\n                return false;\\n            }\\n\\n            if (current_char_is_separator && last_char_is_separator) {\\n                return false;\\n            }\\n\\n            last_char_is_separator = current_char_is_separator;\\n        }\\n        return !last_char_is_separator;\\n    }\\n\\n    function isValidEvmAddress(bytes memory _addr) internal pure returns (bool){\\n        return _addr.length == 20;\\n    }\\n\\n    function isValidAddress(bytes memory _addr, uint chainType) internal view returns (bool){\\n        if (chainType == 1) return isValidEvmAddress(_addr);\\n        if (chainType == 2) return isValidNearAddress(_addr);\\n        return false;\\n    }\\n}\",\"keccak256\":\"0x7c4c70abce55594e1cc464184053d8775acdc27518c8a3a8e31ad38272361cff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb9a137b317dc4806805f2259686186c0c053c32d80fe9c15ecdbf2eb1cf52849\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            Address.functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f4c3eed093dfb0e4e20c1c102d2f2c6894a972f454adb308511a0afb37e6f79\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x94dd781aa290742d990ccb720b3cab52a3865d1ba004e35c1dc757aa3ee788e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is ERC1967Upgrade {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n}\\n\",\"keccak256\":\"0x9e98afb371699f94278d7a3ab3c1d9f740b0dc5939c5b3658aa152a2c247254b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd1d8caaeb45f78e0b0715664d56c220c283c89bf8b8c02954af86404d6b367f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfe1b7a9aa2a530a9e705b220e26cd584e2fbdc9602a3a1066032b12816b46aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/MAPOmnichainServiceV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@mapprotocol/protocol/contracts/interface/ILightNode.sol\\\";\\r\\nimport \\\"@mapprotocol/protocol/contracts/utils/Utils.sol\\\";\\r\\nimport \\\"@mapprotocol/protocol/contracts/lib/RLPReader.sol\\\";\\r\\nimport \\\"./interface/IWrappedToken.sol\\\";\\r\\nimport \\\"./interface/IMintableToken.sol\\\";\\r\\nimport \\\"./interface/IButterMosV2.sol\\\";\\r\\nimport \\\"./utils/EvmDecoder.sol\\\";\\r\\n\\r\\n\\r\\ncontract MAPOmnichainServiceV2 is ReentrancyGuard, Initializable, Pausable, IButterMosV2, UUPSUpgradeable {\\r\\n    using SafeMath for uint;\\r\\n    using RLPReader for bytes;\\r\\n    using RLPReader for RLPReader.RLPItem;\\r\\n    using Address for address;\\r\\n\\r\\n    uint public immutable selfChainId = block.chainid;\\r\\n    uint public nonce;\\r\\n    address public wToken;          // native wrapped token\\r\\n    address public relayContract;\\r\\n    uint256 public relayChainId;\\r\\n    ILightNode public lightNode;\\r\\n\\r\\n    enum chainType{\\r\\n        NULL,\\r\\n        EVM,\\r\\n        NEAR\\r\\n    }\\r\\n\\r\\n    mapping(bytes32 => bool) public orderList;\\r\\n    mapping(address => bool) public mintableTokens;\\r\\n    mapping(uint256 => mapping(address => bool)) public tokenMappingList;\\r\\n\\r\\n    address public butterRouter;\\r\\n\\r\\n    event mapTransferExecute(uint256 indexed fromChain, uint256 indexed toChain, address indexed from);\\r\\n    event SetLightClient(address _lightNode);\\r\\n    event AddMintableToken(address[] _token);\\r\\n    event RemoveMintableToken(address[] _token);\\r\\n    event SetRelayContract(uint256 _chainId, address _relay);\\r\\n    event RegisterToken(address _token, uint _toChain, bool _enable);\\r\\n    event RegisterChain(uint256 _chainId, chainType _type);\\r\\n    event mapSwapExecute(uint256 indexed fromChain, uint256 indexed toChain, address indexed from);\\r\\n\\r\\n    function initialize(address _wToken, address _lightNode,address _owner)\\r\\n    public initializer checkAddress(_wToken) checkAddress(_lightNode) checkAddress(_owner) {\\r\\n        wToken = _wToken;\\r\\n        lightNode = ILightNode(_lightNode);\\r\\n        _changeAdmin(_owner);\\r\\n    }\\r\\n\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n\\r\\n    modifier checkOrder(bytes32 _orderId) {\\r\\n        require(!orderList[_orderId], \\\"order exist\\\");\\r\\n        orderList[_orderId] = true;\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier checkBridgeable(address _token, uint _chainId) {\\r\\n        require(tokenMappingList[_chainId][_token], \\\"token not registered\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier checkAddress(address _address) {\\r\\n        require(_address != address(0), \\\"address is zero\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == _getAdmin(), \\\"mos :: only admin\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function setPause() external onlyOwner {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    function setUnpause() external onlyOwner {\\r\\n        _unpause();\\r\\n    }\\r\\n\\r\\n    function setLightClient(address _lightNode) external onlyOwner checkAddress(_lightNode) {\\r\\n        lightNode = ILightNode(_lightNode);\\r\\n        emit SetLightClient(_lightNode);\\r\\n    }\\r\\n\\r\\n    function addMintableToken(address[] memory _token) external onlyOwner {\\r\\n        for (uint i = 0; i < _token.length; i++) {\\r\\n            mintableTokens[_token[i]] = true;\\r\\n        }\\r\\n        emit AddMintableToken(_token);\\r\\n    }\\r\\n\\r\\n    function removeMintableToken(address[] memory _token) external onlyOwner {\\r\\n        for (uint i = 0; i < _token.length; i++) {\\r\\n            mintableTokens[_token[i]] = false;\\r\\n        }\\r\\n        emit RemoveMintableToken(_token);\\r\\n    }\\r\\n\\r\\n    function setRelayContract(uint256 _chainId, address _relay) external onlyOwner checkAddress(_relay) {\\r\\n        relayContract = _relay;\\r\\n        relayChainId = _chainId;\\r\\n\\t\\r\\n\\temit SetRelayContract(_chainId,_relay);\\r\\n    }\\r\\n\\r\\n    function setButterRouterAddress(address _butterRouter) external onlyOwner checkAddress(_butterRouter) {\\r\\n        butterRouter = _butterRouter;\\r\\n        emit SetButterRouterAddress(_butterRouter);\\r\\n    }\\r\\n\\r\\n    function registerToken(address _token, uint _toChain, bool _enable) external onlyOwner {\\r\\n        require(_token.isContract(),\\\"token is not contract\\\");\\r\\n        tokenMappingList[_toChain][_token] = _enable;\\r\\n        emit RegisterToken(_token,_toChain,_enable);\\r\\n    }\\r\\n\\r\\n    // ------------------------------------------\\r\\n\\r\\n    function swapOutToken(\\r\\n        address _initiatorAddress, // swap initiator address\\r\\n        address _token, // src token\\r\\n        bytes memory _to,\\r\\n        uint256 _amount,\\r\\n        uint256 _toChain, // target chain id\\r\\n        bytes calldata _swapData\\r\\n    )\\r\\n    external\\r\\n    override\\r\\n    nonReentrant\\r\\n    whenNotPaused\\r\\n    checkBridgeable(_token, _toChain)\\r\\n    returns(bytes32 orderId)\\r\\n    {\\r\\n        require(_toChain != selfChainId, \\\"Cannot swap to self chain\\\");\\r\\n        require(_amount > 0, \\\"Sending value is zero\\\");\\r\\n        require(IERC20(_token).balanceOf(msg.sender) >= _amount, \\\"Insufficient token balance\\\");\\r\\n\\r\\n        if (isMintable(_token)) {\\r\\n            IMintableToken(_token).burnFrom(msg.sender, _amount);\\r\\n        } else {\\r\\n            SafeERC20.safeTransferFrom(IERC20(_token),msg.sender,address(this),_amount);\\r\\n        }\\r\\n\\r\\n        orderId = _getOrderID(msg.sender, _to, _toChain);\\r\\n\\r\\n        emit mapSwapOut(\\r\\n            selfChainId,\\r\\n            _toChain,\\r\\n            orderId,\\r\\n            Utils.toBytes(_token),\\r\\n            Utils.toBytes(_initiatorAddress),\\r\\n            _to,\\r\\n            _amount,\\r\\n            _swapData\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function swapOutNative(\\r\\n        address _initiatorAddress, // swap initiator address\\r\\n        bytes memory _to,\\r\\n        uint256 _toChain, // target chain id\\r\\n        bytes calldata _swapData\\r\\n    )\\r\\n    external\\r\\n    override\\r\\n    payable\\r\\n    nonReentrant\\r\\n    whenNotPaused\\r\\n    checkBridgeable(wToken, _toChain)\\r\\n    returns(bytes32 orderId)\\r\\n    {\\r\\n        require(_toChain != selfChainId, \\\"Cannot swap to self chain\\\");\\r\\n        uint amount = msg.value;\\r\\n        require(amount > 0, \\\"Sending value is zero\\\");\\r\\n        IWrappedToken(wToken).deposit{value : amount}();\\r\\n        orderId = _getOrderID(msg.sender, _to, _toChain);\\r\\n        emit mapSwapOut(\\r\\n            selfChainId,\\r\\n            _toChain,\\r\\n            orderId,\\r\\n            Utils.toBytes(wToken),\\r\\n            Utils.toBytes(_initiatorAddress),\\r\\n            _to,\\r\\n            amount,\\r\\n            _swapData\\r\\n        );\\r\\n\\r\\n    }\\r\\n\\r\\n    function depositToken(address _token, address _to, uint _amount) external override nonReentrant whenNotPaused\\r\\n    checkBridgeable(_token, relayChainId) {\\r\\n        address from = msg.sender;\\r\\n        require(_amount > 0, \\\"Sending value is zero\\\");\\r\\n        //require(IERC20(token).balanceOf(_from) >= _amount, \\\"balance too low\\\");\\r\\n\\r\\n        if (isMintable(_token)) {\\r\\n            IMintableToken(_token).burnFrom(from, _amount);\\r\\n        } else {\\r\\n            SafeERC20.safeTransferFrom(IERC20(_token),from,address(this),_amount);\\r\\n        }\\r\\n\\r\\n        bytes32 orderId = _getOrderID(from, Utils.toBytes(_to), relayChainId);\\r\\n        emit mapDepositOut(selfChainId, relayChainId, orderId, _token, Utils.toBytes(from), _to, _amount);\\r\\n    }\\r\\n\\r\\n    function depositNative(address _to) external override payable nonReentrant whenNotPaused\\r\\n    checkBridgeable(wToken, relayChainId) {\\r\\n        address from = msg.sender;\\r\\n        uint amount = msg.value;\\r\\n        require(amount > 0, \\\"Sending value is zero\\\");\\r\\n        bytes32 orderId = _getOrderID(from, Utils.toBytes(_to), relayChainId);\\r\\n\\r\\n        IWrappedToken(wToken).deposit{value : amount}();\\r\\n        emit mapDepositOut(selfChainId, relayChainId, orderId, wToken, Utils.toBytes(from), _to, amount);\\r\\n    }\\r\\n\\r\\n    function swapIn(uint256 _chainId, bytes memory _receiptProof) external nonReentrant whenNotPaused {\\r\\n        require(_chainId == relayChainId, \\\"invalid chain id\\\");\\r\\n        (bool success, string memory message, bytes memory logArray) = lightNode.verifyProofData(_receiptProof);\\r\\n        require(success, message);\\r\\n        IEvent.txLog[] memory logs = EvmDecoder.decodeTxLogs(logArray);\\r\\n        for (uint i = 0; i < logs.length; i++) {\\r\\n            IEvent.txLog memory log = logs[i];\\r\\n            bytes32 topic = abi.decode(log.topics[0], (bytes32));\\r\\n            if (topic == EvmDecoder.MAP_SWAPOUT_TOPIC && relayContract == log.addr) {\\r\\n                (, IEvent.swapOutEvent memory outEvent) = EvmDecoder.decodeSwapOutLog(log);\\r\\n                // there might be more than one events to multi-chains\\r\\n                // only process the event for this chain\\r\\n                if (selfChainId == outEvent.toChain) {\\r\\n                    _swapIn(outEvent);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit mapSwapExecute(_chainId, selfChainId, msg.sender);\\r\\n    }\\r\\n\\r\\n    function isMintable(address _token) public view returns (bool) {\\r\\n        return mintableTokens[_token];\\r\\n    }\\r\\n\\r\\n    function isBridgeable(address _token, uint256 _toChain) public view returns (bool) {\\r\\n        return tokenMappingList[_toChain][_token];\\r\\n    }\\r\\n\\r\\n    function _getOrderID(address _from, bytes memory _to, uint _toChain) internal returns (bytes32){\\r\\n        return keccak256(abi.encodePacked(address(this), nonce++, selfChainId, _toChain, _from, _to));\\r\\n    }\\r\\n\\r\\n    function _swapIn(IEvent.swapOutEvent memory _outEvent) internal checkOrder(_outEvent.orderId) {\\r\\n        address tokenIn = Utils.fromBytes(_outEvent.token);\\r\\n        // receiving address\\r\\n        address payable toAddress = payable(Utils.fromBytes(_outEvent.to));\\r\\n        // amount of token need to be sent\\r\\n        uint actualAmountIn = _outEvent.amount;\\r\\n\\r\\n        if (isMintable(tokenIn)) {\\r\\n            IMintableToken(tokenIn).mint(address(this), actualAmountIn);\\r\\n        }\\r\\n        \\r\\n        // if swap params is not empty, then we need to do swap on current chain\\r\\n        if (_outEvent.swapData.length > 0) {\\r\\n            SafeERC20.safeTransfer(IERC20(tokenIn),butterRouter, actualAmountIn);\\r\\n\\r\\n            (bool result,) = butterRouter.call(\\r\\n                abi.encodeWithSignature(\\r\\n                    \\\"remoteSwapAndCall(bytes32,address,uint256,uint256,bytes,bytes)\\\",\\r\\n                    _outEvent.orderId,\\r\\n                    tokenIn,\\r\\n                    actualAmountIn,\\r\\n                    _outEvent.fromChain,\\r\\n                    _outEvent.from,\\r\\n                    _outEvent.swapData)\\r\\n            );\\r\\n        } else {\\r\\n            // transfer token if swap did not happen\\r\\n            if (tokenIn == wToken) {\\r\\n               IWrappedToken(wToken).withdraw(actualAmountIn);\\r\\n               Address.sendValue(payable(toAddress), actualAmountIn);\\r\\n            } else {\\r\\n               SafeERC20.safeTransfer(IERC20(tokenIn), toAddress, actualAmountIn);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit mapSwapIn(_outEvent.fromChain, selfChainId, _outEvent.orderId, tokenIn, _outEvent.from, toAddress, actualAmountIn);\\r\\n    }\\r\\n\\r\\n    /** UUPS *********************************************************/\\r\\n    function _authorizeUpgrade(address) internal view override {\\r\\n        require(msg.sender == _getAdmin(), \\\"MAPOmnichainService: only Admin can upgrade\\\");\\r\\n    }\\r\\n\\r\\n    function changeAdmin(address _admin) external onlyOwner checkAddress(_admin) {\\r\\n        _changeAdmin(_admin);\\r\\n    }\\r\\n\\r\\n    function getAdmin() external view returns (address) {\\r\\n        return _getAdmin();\\r\\n    }\\r\\n\\r\\n    function getImplementation() external view returns (address) {\\r\\n        return _getImplementation();\\r\\n    }\\r\\n}\",\"keccak256\":\"0x0e89e957d3d927da3929029265edab583eceeb67ceb011ea07811c51b1c4f361\",\"license\":\"MIT\"},\"contracts/interface/IButterMosV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IButterMosV2 {\\r\\n    function swapOutToken(\\r\\n        address _sender,\\r\\n        address _token, // src token\\r\\n        bytes memory _to,\\r\\n        uint256 _amount,\\r\\n        uint256 _toChain, // target chain id\\r\\n        bytes calldata _swapData\\r\\n    ) external returns(bytes32 orderId);\\r\\n\\r\\n    function swapOutNative(\\r\\n        address _sender,\\r\\n        bytes memory _to,\\r\\n        uint256 _toChain, // target chain id\\r\\n        bytes calldata _swapData\\r\\n    ) external payable returns(bytes32 orderId);\\r\\n\\r\\n    function depositToken(address _token, address to, uint _amount) external;\\r\\n    function depositNative(address _to) external payable ;\\r\\n\\r\\n    event SetButterRouterAddress(address indexed _newRouter);\\r\\n\\r\\n    event mapTransferOut(\\r\\n        uint256 indexed fromChain,\\r\\n        uint256 indexed toChain,\\r\\n        bytes32 orderId,\\r\\n        bytes token,\\r\\n        bytes from,\\r\\n        bytes to,\\r\\n        uint256 amount,\\r\\n        bytes toChainToken\\r\\n    );\\r\\n\\r\\n\\r\\n    event mapDepositOut(uint256 indexed fromChain, uint256 indexed toChain, bytes32 orderId,\\r\\n        address token, bytes from, address to, uint256 amount);\\r\\n\\r\\n    event mapSwapOut(\\r\\n        uint256 indexed fromChain, // from chain\\r\\n        uint256 indexed toChain, // to chain\\r\\n        bytes32 orderId, // order id\\r\\n        bytes token, // token to transfer\\r\\n        bytes from, // source chain from address\\r\\n        bytes to,\\r\\n        uint256 amount,\\r\\n        bytes swapData // swap data, used on target chain dex.\\r\\n    );\\r\\n\\r\\n    event mapSwapIn(\\r\\n        uint256 indexed fromChain,\\r\\n        uint256 indexed toChain,\\r\\n        bytes32 indexed orderId,\\r\\n        address token,\\r\\n        bytes from,\\r\\n        address toAddress,\\r\\n        uint256 amountOut\\r\\n    );\\r\\n\\r\\n}\",\"keccak256\":\"0xb1f7fcb2296f185245e32c5745a3015c9395c149d39e67dc9526392167e2f5f6\",\"license\":\"MIT\"},\"contracts/interface/IEvent.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\ninterface IEvent {\\r\\n\\r\\n\\r\\n    struct depositOutEvent {\\r\\n        bytes token;\\r\\n        bytes from;\\r\\n        bytes32 orderId;\\r\\n        uint256 fromChain;\\r\\n        uint256 toChain;\\r\\n        bytes to;\\r\\n        uint256 amount;\\r\\n    }\\r\\n\\r\\n    struct swapOutEvent {\\r\\n        uint256 fromChain;\\r\\n        uint256 toChain;\\r\\n        bytes32 orderId;\\r\\n        bytes token; // token to transfer\\r\\n        bytes from;\\r\\n        bytes to;\\r\\n        uint256 amount;\\r\\n        bytes swapData;\\r\\n    }\\r\\n\\r\\n    struct txLog {\\r\\n        address addr;\\r\\n        bytes[] topics;\\r\\n        bytes data;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x279c434f0027798493d6e8afa080c8e1a9b17d04d34ed7ecae6b4ca822d8bb77\",\"license\":\"MIT\"},\"contracts/interface/IMintableToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\ninterface IMintableToken {\\r\\n    function mint(address to, uint256 amount) external;\\r\\n\\r\\n    function burn(uint256 amount) external;\\r\\n\\r\\n    function burnFrom(address from, uint256 amount) external;\\r\\n}\",\"keccak256\":\"0xe3409443af4fcf27e291794a8046af8f7f0fa539f17609019b48983cae09d5ca\",\"license\":\"MIT\"},\"contracts/interface/IWrappedToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IWrappedToken {\\r\\n    function deposit() external payable;\\r\\n\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n\\r\\n    function withdraw(uint) external;\\r\\n}\",\"keccak256\":\"0xd4c3c1a4c369665efc0f7fffbc1c0f1295f6ed3d5cdae1351a7f4e9cf0bf2af2\",\"license\":\"MIT\"},\"contracts/utils/EvmDecoder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.7;\\r\\n\\r\\n\\r\\nimport \\\"@mapprotocol/protocol/contracts/utils/Utils.sol\\\";\\r\\nimport \\\"@mapprotocol/protocol/contracts/lib/RLPReader.sol\\\";\\r\\nimport \\\"../interface/IEvent.sol\\\";\\r\\nlibrary EvmDecoder {\\r\\n\\r\\n    using RLPReader for bytes;\\r\\n    using RLPReader for RLPReader.RLPItem;\\r\\n\\r\\n    bytes32 constant MAP_DEPOSITOUT_TOPIC = keccak256(bytes('mapDepositOut(uint256,uint256,bytes32,address,bytes,address,uint256)'));\\r\\n    bytes32 constant MAP_SWAPOUT_TOPIC = keccak256(bytes('mapSwapOut(uint256,uint256,bytes32,bytes,bytes,bytes,uint256,bytes)'));\\r\\n\\r\\n\\r\\n    function decodeTxLogs(bytes memory logsHash)\\r\\n    internal\\r\\n    pure\\r\\n    returns (IEvent.txLog[] memory _txLogs){\\r\\n        RLPReader.RLPItem[] memory ls = logsHash.toRlpItem().toList();\\r\\n        _txLogs = new IEvent.txLog[](ls.length);\\r\\n        for (uint256 i = 0; i < ls.length; i++) {\\r\\n            RLPReader.RLPItem[] memory item = ls[i].toList();\\r\\n\\r\\n            require(item.length >= 3, \\\"log length to low\\\");\\r\\n\\r\\n            RLPReader.RLPItem[] memory firstItemList = item[1].toList();\\r\\n            bytes[] memory topic = new bytes[](firstItemList.length);\\r\\n            for (uint256 j = 0; j < firstItemList.length; j++) {\\r\\n                topic[j] = firstItemList[j].toBytes();\\r\\n            }\\r\\n            _txLogs[i] = IEvent.txLog({\\r\\n            addr : item[0].toAddress(),\\r\\n            topics : topic,\\r\\n            data : item[2].toBytes()\\r\\n            });\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    function decodeSwapOutLog(IEvent.txLog memory log)\\r\\n    internal\\r\\n    pure\\r\\n    returns (bytes memory executorId, IEvent.swapOutEvent memory outEvent) {\\r\\n        executorId = Utils.toBytes(log.addr);\\r\\n        outEvent.fromChain = abi.decode(log.topics[1], (uint256));\\r\\n        outEvent.toChain = abi.decode(log.topics[2], (uint256));\\r\\n\\r\\n        (outEvent.orderId, outEvent.token, outEvent.from, outEvent.to, outEvent.amount,outEvent.swapData)\\r\\n        = abi.decode(log.data, (bytes32, bytes, bytes, bytes, uint256, bytes));\\r\\n    }\\r\\n\\r\\n    function decodeDepositOutLog(IEvent.txLog memory log)\\r\\n    internal\\r\\n    pure\\r\\n    returns (bytes memory executorId, IEvent.depositOutEvent memory depositEvent){\\r\\n        executorId = Utils.toBytes(log.addr);\\r\\n\\r\\n        depositEvent.fromChain = abi.decode(log.topics[1], (uint256));\\r\\n        depositEvent.toChain = abi.decode(log.topics[2], (uint256));\\r\\n\\r\\n        address token;\\r\\n        address toAddress;\\r\\n        (depositEvent.orderId, token, depositEvent.from, toAddress, depositEvent.amount)\\r\\n        = abi.decode(log.data, (bytes32, address, bytes, address, uint256));\\r\\n\\r\\n        depositEvent.token = Utils.toBytes(token);\\r\\n        depositEvent.to = Utils.toBytes(toAddress);\\r\\n\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe6e71f59e516451b8bdd2d968d9d68a1ccf9a503153d0622bdea777839829fe6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523060601b6080524660a05234801561001b57600080fd5b5060016000819055805462ff00001916905560805160601c60a051613e156100b06000396000818161054a0152818161088501528181610ef9015281816110ec015281816115b601528181611603015281816117370152818161183d01528181611a2d01528181611b2401526124ec0152600081816109100152818161095001528181610a8d0152610acd0152613e156000f3fe6080604052600436106101e75760003560e01c80636e9960c311610102578063c0c53b8b11610095578063d431b1ac11610064578063d431b1ac146105ac578063d5351aaa146105c1578063ee9592b9146105d4578063fb0f97a81461060f57600080fd5b8063c0c53b8b14610518578063cc9e3e8914610538578063ccb3f4421461056c578063d33a28a21461058c57600080fd5b80638f283970116100d15780638f283970146104ad578063aaf10f42146104cd578063affed0e0146104e2578063b899f904146104f857600080fd5b80636e9960c31461043f578063848cb5c6146104545780638bb2a905146104695780638df0dcde1461048957600080fd5b80634de5103e1161017a5780635c550ac2116101495780635c550ac2146103b15780635c975abb146103d15780635f670bd3146103ef5780636af6400d1461040f57600080fd5b80634de5103e1461033e5780634f1ef2861461035e57806355b355601461037157806355d35a401461039157600080fd5b806333bb7f91116101b657806333bb7f91146102bb5780633659cfe6146102ce5780633e553bab146102ee57806345711d481461030e57600080fd5b80630babd864146101f35780631a19a62814610230578063222b15fb146102525780632b585db41461029b57600080fd5b366101ee57005b600080fd5b3480156101ff57600080fd5b50600354610213906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561023c57600080fd5b5061025061024b3660046134b5565b61062f565b005b34801561025e57600080fd5b5061028b61026d366004613242565b6001600160a01b031660009081526008602052604090205460ff1690565b6040519015158152602001610227565b3480156102a757600080fd5b5061028b6102b636600461344b565b610713565b6102506102c9366004613242565b610740565b3480156102da57600080fd5b506102506102e9366004613242565b610905565b3480156102fa57600080fd5b50610250610309366004613242565b6109ce565b34801561031a57600080fd5b5061028b610329366004613242565b60086020526000908152604090205460ff1681565b34801561034a57600080fd5b50600a54610213906001600160a01b031681565b61025061036c36600461337a565b610a82565b34801561037d57600080fd5b5061025061038c366004613475565b610b3c565b34801561039d57600080fd5b506102506103ac366004613702565b610c38565b3480156103bd57600080fd5b50600454610213906001600160a01b031681565b3480156103dd57600080fd5b5060015462010000900460ff1661028b565b3480156103fb57600080fd5b50600654610213906001600160a01b031681565b34801561041b57600080fd5b5061028b61042a366004613612565b60076020526000908152604090205460ff1681565b34801561044b57600080fd5b50610213610cf1565b34801561046057600080fd5b50610250610d00565b34801561047557600080fd5b50610250610484366004613242565b610d42565b34801561049557600080fd5b5061049f60055481565b604051908152602001610227565b3480156104b957600080fd5b506102506104c8366004613242565b610dec565b3480156104d957600080fd5b50610213610e54565b3480156104ee57600080fd5b5061049f60025481565b34801561050457600080fd5b5061049f6105133660046132a0565b610e5e565b34801561052457600080fd5b5061025061053336600461325d565b611170565b34801561054457600080fd5b5061049f7f000000000000000000000000000000000000000000000000000000000000000081565b34801561057857600080fd5b506102506105873660046134b5565b6112dd565b34801561059857600080fd5b506102506105a736600461372e565b6113ad565b3480156105b857600080fd5b50610250611658565b61049f6105cf3660046133c7565b611698565b3480156105e057600080fd5b5061028b6105ef366004613702565b600960209081526000928352604080842090915290825290205460ff1681565b34801561061b57600080fd5b5061025061062a36600461333e565b6118cc565b610637611aa1565b6001600160a01b0316336001600160a01b0316146106705760405162461bcd60e51b815260040161066790613ab9565b60405180910390fd5b60005b81518110156106d85760006008600084848151811061069457610694613d3b565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055806106d081613d0a565b915050610673565b507fc27ae4a8b33d533c4256030aa4b2aaa26894eeaee1163759bd284eabcf15caa7816040516107089190613835565b60405180910390a150565b60008181526009602090815260408083206001600160a01b038616845290915290205460ff165b92915050565b600260005414156107635760405162461bcd60e51b815260040161066790613ae4565b600260005560015462010000900460ff16156107915760405162461bcd60e51b815260040161066790613a8f565b60035460055460008181526009602090815260408083206001600160a01b039095168084529490915290205460ff166107dc5760405162461bcd60e51b8152600401610667906139ec565b3334806107fb5760405162461bcd60e51b815260040161066790613b1b565b60006108128361080a88611ad4565b600554611b0a565b9050600360009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b15801561086457600080fd5b505af1158015610878573d6000803e3d6000fd5b50506005546003549093507f000000000000000000000000000000000000000000000000000000000000000092507fb7100086a8e13ebae772a0f09b07046e389a6b036406d22b86f2d2e5b860a8d9915084906001600160a01b03166108dd88611ad4565b8b886040516108f0959493929190613882565b60405180910390a35050600160005550505050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561094e5760405162461bcd60e51b8152600401610667906139a0565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610980611b7b565b6001600160a01b0316146109a65760405162461bcd60e51b815260040161066790613a1a565b6109af81611ba3565b604080516000808252602082019092526109cb91839190611c1f565b50565b6109d6611aa1565b6001600160a01b0316336001600160a01b031614610a065760405162461bcd60e51b815260040161066790613ab9565b806001600160a01b038116610a2d5760405162461bcd60e51b815260040161066790613a66565b600680546001600160a01b0319166001600160a01b0384169081179091556040519081527fdbbd7b2f0d0e7ab85011e3c9115c836f3cc29f189c9c0f77b8f0dc718116c9469060200160405180910390a15050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610acb5760405162461bcd60e51b8152600401610667906139a0565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610afd611b7b565b6001600160a01b031614610b235760405162461bcd60e51b815260040161066790613a1a565b610b2c82611ba3565b610b3882826001611c1f565b5050565b610b44611aa1565b6001600160a01b0316336001600160a01b031614610b745760405162461bcd60e51b815260040161066790613ab9565b6001600160a01b0383163b610bc35760405162461bcd60e51b81526020600482015260156024820152741d1bdad95b881a5cc81b9bdd0818dbdb9d1c9858dd605a1b6044820152606401610667565b60008281526009602090815260408083206001600160a01b03871680855290835292819020805460ff191685151590811790915581519384529183018590528201527fb7e2e36d837b3e9a99d8c3de2eed62d21e4b1550a939fe020796d059a023800a906060015b60405180910390a1505050565b610c40611aa1565b6001600160a01b0316336001600160a01b031614610c705760405162461bcd60e51b815260040161066790613ab9565b806001600160a01b038116610c975760405162461bcd60e51b815260040161066790613a66565b600480546001600160a01b0319166001600160a01b03841690811790915560058490556040805185815260208101929092527f1a43895ae95563631980575c9049ad602ade0cced91de88c94af53e71de9f0809101610c2b565b6000610cfb611aa1565b905090565b610d08611aa1565b6001600160a01b0316336001600160a01b031614610d385760405162461bcd60e51b815260040161066790613ab9565b610d40611d6a565b565b610d4a611aa1565b6001600160a01b0316336001600160a01b031614610d7a5760405162461bcd60e51b815260040161066790613ab9565b806001600160a01b038116610da15760405162461bcd60e51b815260040161066790613a66565b600a80546001600160a01b0319166001600160a01b0384169081179091556040517f86f631a271194f3cfd826acb67b3a585a0e4f3d1c99297157050940b41a7b2d190600090a25050565b610df4611aa1565b6001600160a01b0316336001600160a01b031614610e245760405162461bcd60e51b815260040161066790613ab9565b806001600160a01b038116610e4b5760405162461bcd60e51b815260040161066790613a66565b610b3882611e05565b6000610cfb611b7b565b600060026000541415610e835760405162461bcd60e51b815260040161066790613ae4565b600260005560015462010000900460ff1615610eb15760405162461bcd60e51b815260040161066790613a8f565b60008481526009602090815260408083206001600160a01b038b1684529091529020548790859060ff16610ef75760405162461bcd60e51b8152600401610667906139ec565b7f0000000000000000000000000000000000000000000000000000000000000000861415610f635760405162461bcd60e51b815260206004820152601960248201527821b0b73737ba1039bbb0b8103a379039b2b6331031b430b4b760391b6044820152606401610667565b60008711610f835760405162461bcd60e51b815260040161066790613b1b565b6040516370a0823160e01b815233600482015287906001600160a01b038b16906370a082319060240160206040518083038186803b158015610fc457600080fd5b505afa158015610fd8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ffc919061362b565b101561104a5760405162461bcd60e51b815260206004820152601a60248201527f496e73756666696369656e7420746f6b656e2062616c616e63650000000000006044820152606401610667565b6001600160a01b03891660009081526008602052604090205460ff16156110d05760405163079cc67960e41b8152336004820152602481018890526001600160a01b038a16906379cc679090604401600060405180830381600087803b1580156110b357600080fd5b505af11580156110c7573d6000803e3d6000fd5b505050506110dc565b6110dc8933308a611e59565b6110e7338988611b0a565b9250857f00000000000000000000000000000000000000000000000000000000000000007fca1cf8cebf88499429cca8f87cbca15ab8dafd06702259a5344ddce89ef3f3a5856111368d611ad4565b61113f8f611ad4565b8d8d8c8c604051611156979695949392919061390f565b60405180910390a350506001600055979650505050505050565b600154610100900460ff1661118b5760015460ff161561118f565b303b155b6111f25760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610667565b600154610100900460ff16158015611214576001805461ffff19166101011790555b836001600160a01b03811661123b5760405162461bcd60e51b815260040161066790613a66565b836001600160a01b0381166112625760405162461bcd60e51b815260040161066790613a66565b836001600160a01b0381166112895760405162461bcd60e51b815260040161066790613a66565b600380546001600160a01b03808a166001600160a01b03199283161790925560068054928916929091169190911790556112c285611e05565b50505080156112d7576001805461ff00191690555b50505050565b6112e5611aa1565b6001600160a01b0316336001600160a01b0316146113155760405162461bcd60e51b815260040161066790613ab9565b60005b815181101561137d5760016008600084848151811061133957611339613d3b565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790558061137581613d0a565b915050611318565b507fdacfd802eca1f2a9d9a6e78cf204ab0fe040a4ba3a8a00a66872d18658b61e5a816040516107089190613835565b600260005414156113d05760405162461bcd60e51b815260040161066790613ae4565b600260005560015462010000900460ff16156113fe5760405162461bcd60e51b815260040161066790613a8f565b60055482146114425760405162461bcd60e51b815260206004820152601060248201526f1a5b9d985b1a590818da185a5b881a5960821b6044820152606401610667565b60065460405163016dc52760e41b8152600091829182916001600160a01b0316906316dc52709061147790879060040161398d565b60006040518083038186803b15801561148f57600080fd5b505afa1580156114a3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114cb9190810190613585565b9250925092508282906114f15760405162461bcd60e51b8152600401610667919061398d565b5060006114fd82611ec4565b905060005b81518110156115fb57600082828151811061151f5761151f613d3b565b602002602001015190506000816020015160008151811061154257611542613d3b565b602002602001015180602001905181019061155d919061362b565b9050604051806080016040528060438152602001613d9d60439139805190602001208114801561159c575081516004546001600160a01b039081169116145b156115e65760006115ac83612154565b91505080602001517f000000000000000000000000000000000000000000000000000000000000000014156115e4576115e48161225b565b505b505080806115f390613d0a565b915050611502565b5060405133907f00000000000000000000000000000000000000000000000000000000000000009088907f8131e5b107f7021b0773c1108755872d7b94bb31532fdf2256e0a3ef2c890a3d90600090a45050600160005550505050565b611660611aa1565b6001600160a01b0316336001600160a01b0316146116905760405162461bcd60e51b815260040161066790613ab9565b610d40612558565b6000600260005414156116bd5760405162461bcd60e51b815260040161066790613ae4565b600260005560015462010000900460ff16156116eb5760405162461bcd60e51b815260040161066790613a8f565b60035460008581526009602090815260408083206001600160a01b0390941680845293909152902054859060ff166117355760405162461bcd60e51b8152600401610667906139ec565b7f00000000000000000000000000000000000000000000000000000000000000008614156117a15760405162461bcd60e51b815260206004820152601960248201527821b0b73737ba1039bbb0b8103a379039b2b6331031b430b4b760391b6044820152606401610667565b34806117bf5760405162461bcd60e51b815260040161066790613b1b565b600360009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561180f57600080fd5b505af1158015611823573d6000803e3d6000fd5b5050505050611833338989611b0a565b60035490945087907f0000000000000000000000000000000000000000000000000000000000000000907fca1cf8cebf88499429cca8f87cbca15ab8dafd06702259a5344ddce89ef3f3a5908790611893906001600160a01b0316611ad4565b61189c8e611ad4565b8d878d8d6040516118b3979695949392919061390f565b60405180910390a3505060016000555095945050505050565b600260005414156118ef5760405162461bcd60e51b815260040161066790613ae4565b600260005560015462010000900460ff161561191d5760405162461bcd60e51b815260040161066790613a8f565b60055460008181526009602090815260408083206001600160a01b038816845290915290205484919060ff166119655760405162461bcd60e51b8152600401610667906139ec565b33836119835760405162461bcd60e51b815260040161066790613b1b565b6001600160a01b03861660009081526008602052604090205460ff1615611a0b5760405163079cc67960e41b81526001600160a01b038281166004830152602482018690528716906379cc679090604401600060405180830381600087803b1580156119ee57600080fd5b505af1158015611a02573d6000803e3d6000fd5b50505050611a17565b611a1786823087611e59565b6000611a268261080a88611ad4565b90506005547f00000000000000000000000000000000000000000000000000000000000000007fb7100086a8e13ebae772a0f09b07046e389a6b036406d22b86f2d2e5b860a8d9838a611a7887611ad4565b8b8b604051611a8b959493929190613882565b60405180910390a3505060016000555050505050565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b604051606082811b6bffffffffffffffffffffffff19166020830152906034016040516020818303038152906040529050919050565b6002805460009130919083611b1e83613d0a565b919050557f0000000000000000000000000000000000000000000000000000000000000000848787604051602001611b5b9695949392919061378a565b6040516020818303038152906040528051906020012090505b9392505050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc611ac5565b611bab611aa1565b6001600160a01b0316336001600160a01b0316146109cb5760405162461bcd60e51b815260206004820152602b60248201527f4d41504f6d6e69636861696e536572766963653a206f6e6c792041646d696e2060448201526a63616e207570677261646560a81b6064820152608401610667565b6000611c29611b7b565b9050611c34846125ba565b600083511180611c415750815b15611c5257611c508484612662565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff16611d6357805460ff191660011781556040516001600160a01b0383166024820152611cd190869060440160408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b179052612662565b50805460ff19168155611ce2611b7b565b6001600160a01b0316826001600160a01b031614611d5a5760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b6064820152608401610667565b611d6385612687565b5050505050565b60015462010000900460ff16611db95760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610667565b6001805462ff0000191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f611e2e611aa1565b604080516001600160a01b03928316815291841660208301520160405180910390a16109cb816126c7565b6040516001600160a01b03808516602483015283166044820152606481018290526112d79085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612753565b60606000611f01611efc8460408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b61282a565b905080516001600160401b03811115611f1c57611f1c613d51565b604051908082528060200260200182016040528015611f7a57816020015b611f67604051806060016040528060006001600160a01b0316815260200160608152602001606081525090565b815260200190600190039081611f3a5790505b50915060005b815181101561214d576000611fad838381518110611fa057611fa0613d3b565b602002602001015161282a565b9050600381511015611ff55760405162461bcd60e51b81526020600482015260116024820152706c6f67206c656e67746820746f206c6f7760781b6044820152606401610667565b600061200d82600181518110611fa057611fa0613d3b565b9050600081516001600160401b0381111561202a5761202a613d51565b60405190808252806020026020018201604052801561205d57816020015b60608152602001906001900390816120485790505b50905060005b82518110156120be5761208e83828151811061208157612081613d3b565b6020026020010151612971565b8282815181106120a0576120a0613d3b565b602002602001018190525080806120b690613d0a565b915050612063565b5060405180606001604052806120ed856000815181106120e0576120e0613d3b565b6020026020010151612a24565b6001600160a01b031681526020018281526020016121178560028151811061208157612081613d3b565b81525086858151811061212c5761212c613d3b565b6020026020010181905250505050808061214590613d0a565b915050611f80565b5050919050565b60606121a160405180610100016040528060008152602001600081526020016000801916815260200160608152602001606081526020016060815260200160008152602001606081525090565b82516121ac90611ad4565b915082602001516001815181106121c5576121c5613d3b565b60200260200101518060200190518101906121e0919061362b565b81526020830151805160029081106121fa576121fa613d3b565b6020026020010151806020019051810190612215919061362b565b81602001818152505082604001518060200190518101906122369190613644565b60e087015260c086015260a08501526080840152606083015260408201529092909150565b60408082015160008181526007602052919091205460ff16156122ae5760405162461bcd60e51b815260206004820152600b60248201526a1bdc99195c88195e1a5cdd60aa1b6044820152606401610667565b6000818152600760205260408120805460ff1916600117905560608301516122d7906014015190565b905060006122ea8460a001516014015190565b60c0850151909150612314836001600160a01b031660009081526008602052604090205460ff1690565b1561237a576040516340c10f1960e01b8152306004820152602481018290526001600160a01b038416906340c10f1990604401600060405180830381600087803b15801561236157600080fd5b505af1158015612375573d6000803e3d6000fd5b505050505b60e0850151511561245757600a5461239d9084906001600160a01b031683612a76565b600a546040808701518751608089015160e08a015193516000956001600160a01b0316946123d694938a938993919290916024016138bd565b60408051601f198184030181529181526020820180516001600160e01b0316633af61ed560e21b1790525161240b91906137e5565b6000604051808303816000865af19150503d8060008114612448576040519150601f19603f3d011682016040523d82523d6000602084013e61244d565b606091505b50509050506124e5565b6003546001600160a01b03848116911614156124da57600354604051632e1a7d4d60e01b8152600481018390526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b1580156124b357600080fd5b505af11580156124c7573d6000803e3d6000fd5b505050506124d58282612aa6565b6124e5565b6124e5838383612a76565b84604001517f000000000000000000000000000000000000000000000000000000000000000086600001517f2a945137b011d4aadec6425788c652197d107fc33f6cdccbb0c269273be9c1c986896080015187876040516125499493929190613801565b60405180910390a45050505050565b60015462010000900460ff16156125815760405162461bcd60e51b815260040161066790613a8f565b6001805462ff00001916620100001790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611de83390565b803b61261e5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610667565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5b80546001600160a01b0319166001600160a01b039290921691909117905550565b6060611b748383604051806060016040528060278152602001613d7660279139612bbf565b612690816125ba565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001600160a01b03811661272c5760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b6064820152608401610667565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103612641565b60006127a8826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612c939092919063ffffffff16565b80519091501561282557808060200190518101906127c69190613568565b6128255760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610667565b505050565b606061283582612caa565b6128705760405162461bcd60e51b815260206004820152600c60248201526b1a5cc81b1a5cdd0819985a5b60a21b6044820152606401610667565b600061287b83612ce3565b90506000816001600160401b0381111561289757612897613d51565b6040519080825280602002602001820160405280156128dc57816020015b60408051808201909152600080825260208201528152602001906001900390816128b55790505b50905060006128ee8560200151612d66565b85602001516128fd9190613ba1565b90506000805b848110156129665761291483612de1565b915060405180604001604052808381526020018481525084828151811061293d5761293d613d3b565b60209081029190910101526129528284613ba1565b92508061295e81613d0a565b915050612903565b509195945050505050565b80516060906129b55760405162461bcd60e51b815260206004820152601060248201526f6974656d206c656e206973207a65726f60801b6044820152606401610667565b6000806129c184612e8a565b915091506000816001600160401b038111156129df576129df613d51565b6040519080825280601f01601f191660200182016040528015612a09576020820181803683370190505b50905060208101612a1b848285612ed1565b50949350505050565b8051600090601514612a6d5760405162461bcd60e51b81526020600482015260126024820152716974656d206c656e206973206e6f7420323160701b6044820152606401610667565b61073a82612f50565b6040516001600160a01b03831660248201526044810182905261282590849063a9059cbb60e01b90606401611e8d565b80471015612af65760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610667565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612b43576040519150601f19603f3d011682016040523d82523d6000602084013e612b48565b606091505b50509050806128255760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610667565b6060833b612c1e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610667565b600080856001600160a01b031685604051612c3991906137e5565b600060405180830381855af49150503d8060008114612c74576040519150601f19603f3d011682016040523d82523d6000602084013e612c79565b606091505b5091509150612c89828286612fd7565b9695505050505050565b6060612ca28484600085613010565b949350505050565b8051600090612cbb57506000919050565b6020820151805160001a9060c0821015612cd9575060009392505050565b5060019392505050565b8051600090612cf457506000919050565b600080612d048460200151612d66565b8460200151612d139190613ba1565b9050600084600001518560200151612d2b9190613ba1565b90505b80821015612d5d57612d3f82612de1565b612d499083613ba1565b915082612d5581613d0a565b935050612d2e565b50909392505050565b8051600090811a6080811015612d7f5750600092915050565b60b8811080612d9a575060c08110801590612d9a575060f881105b15612da85750600192915050565b60c0811015612dd557612dbd600160b8613cbb565b612dca9060ff1682613ca4565b611b74906001613ba1565b612dbd600160f8613cbb565b80516000908190811a6080811015612dfc5760019150612e83565b60b8811015612e2257612e10608082613ca4565b612e1b906001613ba1565b9150612e83565b60c0811015612e4f5760b78103600185019450806020036101000a85510460018201810193505050612e83565b60f8811015612e6357612e1060c082613ca4565b60f78103600185019450806020036101000a855104600182018101935050505b5092915050565b6000806000612e9c8460200151612d66565b90506000818560200151612eb09190613ba1565b90506000828660000151612ec49190613ca4565b9196919550909350505050565b80612edb57505050565b60208110612f135782518252612ef2602084613ba1565b9250612eff602083613ba1565b9150612f0c602082613ca4565b9050612edb565b80156128255760006001612f28836020613ca4565b612f3490610100613bfc565b612f3e9190613ca4565b84518451821691191617835250505050565b805160009015801590612f6557508151602110155b612fa85760405162461bcd60e51b81526020600482015260146024820152731a5d195b481b195b881a5cc81b9bdd081d5a5b9d60621b6044820152606401610667565b600080612fb484612e8a565b815191935091506020821015612ca25760208290036101000a9004949350505050565b60608315612fe6575081611b74565b825115612ff65782518084602001fd5b8160405162461bcd60e51b8152600401610667919061398d565b6060824710156130715760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610667565b843b6130bf5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610667565b600080866001600160a01b031685876040516130db91906137e5565b60006040518083038185875af1925050503d8060008114613118576040519150601f19603f3d011682016040523d82523d6000602084013e61311d565b606091505b509150915061312d828286612fd7565b979650505050505050565b600061314b61314684613b7a565b613b4a565b905082815283838301111561315f57600080fd5b611b74836020830184613cde565b80356001600160a01b038116811461318457600080fd5b919050565b60008083601f84011261319b57600080fd5b5081356001600160401b038111156131b257600080fd5b6020830191508360208285010111156131ca57600080fd5b9250929050565b600082601f8301126131e257600080fd5b81356131f061314682613b7a565b81815284602083860101111561320557600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f83011261323357600080fd5b611b7483835160208501613138565b60006020828403121561325457600080fd5b611b748261316d565b60008060006060848603121561327257600080fd5b61327b8461316d565b92506132896020850161316d565b91506132976040850161316d565b90509250925092565b600080600080600080600060c0888a0312156132bb57600080fd5b6132c48861316d565b96506132d26020890161316d565b955060408801356001600160401b03808211156132ee57600080fd5b6132fa8b838c016131d1565b965060608a0135955060808a0135945060a08a013591508082111561331e57600080fd5b5061332b8a828b01613189565b989b979a50959850939692959293505050565b60008060006060848603121561335357600080fd5b61335c8461316d565b925061336a6020850161316d565b9150604084013590509250925092565b6000806040838503121561338d57600080fd5b6133968361316d565b915060208301356001600160401b038111156133b157600080fd5b6133bd858286016131d1565b9150509250929050565b6000806000806000608086880312156133df57600080fd5b6133e88661316d565b945060208601356001600160401b038082111561340457600080fd5b61341089838a016131d1565b955060408801359450606088013591508082111561342d57600080fd5b5061343a88828901613189565b969995985093965092949392505050565b6000806040838503121561345e57600080fd5b6134678361316d565b946020939093013593505050565b60008060006060848603121561348a57600080fd5b6134938461316d565b92506020840135915060408401356134aa81613d67565b809150509250925092565b600060208083850312156134c857600080fd5b82356001600160401b03808211156134df57600080fd5b818501915085601f8301126134f357600080fd5b81358181111561350557613505613d51565b8060051b9150613516848301613b4a565b8181528481019084860184860187018a101561353157600080fd5b600095505b8386101561355b576135478161316d565b835260019590950194918601918601613536565b5098975050505050505050565b60006020828403121561357a57600080fd5b8151611b7481613d67565b60008060006060848603121561359a57600080fd5b83516135a581613d67565b60208501519093506001600160401b03808211156135c257600080fd5b818601915086601f8301126135d657600080fd5b6135e587835160208501613138565b935060408601519150808211156135fb57600080fd5b5061360886828701613222565b9150509250925092565b60006020828403121561362457600080fd5b5035919050565b60006020828403121561363d57600080fd5b5051919050565b60008060008060008060c0878903121561365d57600080fd5b8651955060208701516001600160401b038082111561367b57600080fd5b6136878a838b01613222565b9650604089015191508082111561369d57600080fd5b6136a98a838b01613222565b955060608901519150808211156136bf57600080fd5b6136cb8a838b01613222565b94506080890151935060a08901519150808211156136e857600080fd5b506136f589828a01613222565b9150509295509295509295565b6000806040838503121561371557600080fd5b823591506137256020840161316d565b90509250929050565b6000806040838503121561374157600080fd5b8235915060208301356001600160401b038111156133b157600080fd5b60008151808452613776816020860160208601613cde565b601f01601f19169290920160200192915050565b60006bffffffffffffffffffffffff19808960601b168352876014840152866034840152856054840152808560601b1660748401525082516137d3816088850160208701613cde565b91909101608801979650505050505050565b600082516137f7818460208701613cde565b9190910192915050565b600060018060a01b03808716835260806020840152613823608084018761375e565b94166040830152506060015292915050565b6020808252825182820181905260009190848201906040850190845b818110156138765783516001600160a01b031683529284019291840191600101613851565b50909695505050505050565b858152600060018060a01b03808716602084015260a060408401526138aa60a084018761375e565b9416606083015250608001529392505050565b86815260018060a01b038616602082015284604082015283606082015260c0608082015260006138f060c083018561375e565b82810360a0840152613902818561375e565b9998505050505050505050565b87815260c06020820152600061392860c083018961375e565b828103604084015261393a818961375e565b9050828103606084015261394e818861375e565b905085608084015282810360a0840152838152838560208301376000602085830101526020601f19601f86011682010191505098975050505050505050565b602081526000611b74602083018461375e565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252601490820152731d1bdad95b881b9bdd081c9959da5cdd195c995960621b604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252600f908201526e61646472657373206973207a65726f60881b604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60208082526011908201527036b7b9901d1d1037b7363c9030b236b4b760791b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526015908201527453656e64696e672076616c7565206973207a65726f60581b604082015260600190565b604051601f8201601f191681016001600160401b0381118282101715613b7257613b72613d51565b604052919050565b60006001600160401b03821115613b9357613b93613d51565b50601f01601f191660200190565b60008219821115613bb457613bb4613d25565b500190565b600181815b80851115613bf4578160001904821115613bda57613bda613d25565b80851615613be757918102915b93841c9390800290613bbe565b509250929050565b6000611b748383600082613c125750600161073a565b81613c1f5750600061073a565b8160018114613c355760028114613c3f57613c5b565b600191505061073a565b60ff841115613c5057613c50613d25565b50506001821b61073a565b5060208310610133831016604e8410600b8410161715613c7e575081810a61073a565b613c888383613bb9565b8060001904821115613c9c57613c9c613d25565b029392505050565b600082821015613cb657613cb6613d25565b500390565b600060ff821660ff841680821015613cd557613cd5613d25565b90039392505050565b60005b83811015613cf9578181015183820152602001613ce1565b838111156112d75750506000910152565b6000600019821415613d1e57613d1e613d25565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b80151581146109cb57600080fdfe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c65646d6170537761704f75742875696e743235362c75696e743235362c627974657333322c62797465732c62797465732c62797465732c75696e743235362c627974657329a2646970667358221220eba4e357c77f06f17912f25fc2df02e9f6be13d44da07cd7763322eff0037bbb64736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106101e75760003560e01c80636e9960c311610102578063c0c53b8b11610095578063d431b1ac11610064578063d431b1ac146105ac578063d5351aaa146105c1578063ee9592b9146105d4578063fb0f97a81461060f57600080fd5b8063c0c53b8b14610518578063cc9e3e8914610538578063ccb3f4421461056c578063d33a28a21461058c57600080fd5b80638f283970116100d15780638f283970146104ad578063aaf10f42146104cd578063affed0e0146104e2578063b899f904146104f857600080fd5b80636e9960c31461043f578063848cb5c6146104545780638bb2a905146104695780638df0dcde1461048957600080fd5b80634de5103e1161017a5780635c550ac2116101495780635c550ac2146103b15780635c975abb146103d15780635f670bd3146103ef5780636af6400d1461040f57600080fd5b80634de5103e1461033e5780634f1ef2861461035e57806355b355601461037157806355d35a401461039157600080fd5b806333bb7f91116101b657806333bb7f91146102bb5780633659cfe6146102ce5780633e553bab146102ee57806345711d481461030e57600080fd5b80630babd864146101f35780631a19a62814610230578063222b15fb146102525780632b585db41461029b57600080fd5b366101ee57005b600080fd5b3480156101ff57600080fd5b50600354610213906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561023c57600080fd5b5061025061024b3660046134b5565b61062f565b005b34801561025e57600080fd5b5061028b61026d366004613242565b6001600160a01b031660009081526008602052604090205460ff1690565b6040519015158152602001610227565b3480156102a757600080fd5b5061028b6102b636600461344b565b610713565b6102506102c9366004613242565b610740565b3480156102da57600080fd5b506102506102e9366004613242565b610905565b3480156102fa57600080fd5b50610250610309366004613242565b6109ce565b34801561031a57600080fd5b5061028b610329366004613242565b60086020526000908152604090205460ff1681565b34801561034a57600080fd5b50600a54610213906001600160a01b031681565b61025061036c36600461337a565b610a82565b34801561037d57600080fd5b5061025061038c366004613475565b610b3c565b34801561039d57600080fd5b506102506103ac366004613702565b610c38565b3480156103bd57600080fd5b50600454610213906001600160a01b031681565b3480156103dd57600080fd5b5060015462010000900460ff1661028b565b3480156103fb57600080fd5b50600654610213906001600160a01b031681565b34801561041b57600080fd5b5061028b61042a366004613612565b60076020526000908152604090205460ff1681565b34801561044b57600080fd5b50610213610cf1565b34801561046057600080fd5b50610250610d00565b34801561047557600080fd5b50610250610484366004613242565b610d42565b34801561049557600080fd5b5061049f60055481565b604051908152602001610227565b3480156104b957600080fd5b506102506104c8366004613242565b610dec565b3480156104d957600080fd5b50610213610e54565b3480156104ee57600080fd5b5061049f60025481565b34801561050457600080fd5b5061049f6105133660046132a0565b610e5e565b34801561052457600080fd5b5061025061053336600461325d565b611170565b34801561054457600080fd5b5061049f7f000000000000000000000000000000000000000000000000000000000000000081565b34801561057857600080fd5b506102506105873660046134b5565b6112dd565b34801561059857600080fd5b506102506105a736600461372e565b6113ad565b3480156105b857600080fd5b50610250611658565b61049f6105cf3660046133c7565b611698565b3480156105e057600080fd5b5061028b6105ef366004613702565b600960209081526000928352604080842090915290825290205460ff1681565b34801561061b57600080fd5b5061025061062a36600461333e565b6118cc565b610637611aa1565b6001600160a01b0316336001600160a01b0316146106705760405162461bcd60e51b815260040161066790613ab9565b60405180910390fd5b60005b81518110156106d85760006008600084848151811061069457610694613d3b565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055806106d081613d0a565b915050610673565b507fc27ae4a8b33d533c4256030aa4b2aaa26894eeaee1163759bd284eabcf15caa7816040516107089190613835565b60405180910390a150565b60008181526009602090815260408083206001600160a01b038616845290915290205460ff165b92915050565b600260005414156107635760405162461bcd60e51b815260040161066790613ae4565b600260005560015462010000900460ff16156107915760405162461bcd60e51b815260040161066790613a8f565b60035460055460008181526009602090815260408083206001600160a01b039095168084529490915290205460ff166107dc5760405162461bcd60e51b8152600401610667906139ec565b3334806107fb5760405162461bcd60e51b815260040161066790613b1b565b60006108128361080a88611ad4565b600554611b0a565b9050600360009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b15801561086457600080fd5b505af1158015610878573d6000803e3d6000fd5b50506005546003549093507f000000000000000000000000000000000000000000000000000000000000000092507fb7100086a8e13ebae772a0f09b07046e389a6b036406d22b86f2d2e5b860a8d9915084906001600160a01b03166108dd88611ad4565b8b886040516108f0959493929190613882565b60405180910390a35050600160005550505050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561094e5760405162461bcd60e51b8152600401610667906139a0565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610980611b7b565b6001600160a01b0316146109a65760405162461bcd60e51b815260040161066790613a1a565b6109af81611ba3565b604080516000808252602082019092526109cb91839190611c1f565b50565b6109d6611aa1565b6001600160a01b0316336001600160a01b031614610a065760405162461bcd60e51b815260040161066790613ab9565b806001600160a01b038116610a2d5760405162461bcd60e51b815260040161066790613a66565b600680546001600160a01b0319166001600160a01b0384169081179091556040519081527fdbbd7b2f0d0e7ab85011e3c9115c836f3cc29f189c9c0f77b8f0dc718116c9469060200160405180910390a15050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610acb5760405162461bcd60e51b8152600401610667906139a0565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610afd611b7b565b6001600160a01b031614610b235760405162461bcd60e51b815260040161066790613a1a565b610b2c82611ba3565b610b3882826001611c1f565b5050565b610b44611aa1565b6001600160a01b0316336001600160a01b031614610b745760405162461bcd60e51b815260040161066790613ab9565b6001600160a01b0383163b610bc35760405162461bcd60e51b81526020600482015260156024820152741d1bdad95b881a5cc81b9bdd0818dbdb9d1c9858dd605a1b6044820152606401610667565b60008281526009602090815260408083206001600160a01b03871680855290835292819020805460ff191685151590811790915581519384529183018590528201527fb7e2e36d837b3e9a99d8c3de2eed62d21e4b1550a939fe020796d059a023800a906060015b60405180910390a1505050565b610c40611aa1565b6001600160a01b0316336001600160a01b031614610c705760405162461bcd60e51b815260040161066790613ab9565b806001600160a01b038116610c975760405162461bcd60e51b815260040161066790613a66565b600480546001600160a01b0319166001600160a01b03841690811790915560058490556040805185815260208101929092527f1a43895ae95563631980575c9049ad602ade0cced91de88c94af53e71de9f0809101610c2b565b6000610cfb611aa1565b905090565b610d08611aa1565b6001600160a01b0316336001600160a01b031614610d385760405162461bcd60e51b815260040161066790613ab9565b610d40611d6a565b565b610d4a611aa1565b6001600160a01b0316336001600160a01b031614610d7a5760405162461bcd60e51b815260040161066790613ab9565b806001600160a01b038116610da15760405162461bcd60e51b815260040161066790613a66565b600a80546001600160a01b0319166001600160a01b0384169081179091556040517f86f631a271194f3cfd826acb67b3a585a0e4f3d1c99297157050940b41a7b2d190600090a25050565b610df4611aa1565b6001600160a01b0316336001600160a01b031614610e245760405162461bcd60e51b815260040161066790613ab9565b806001600160a01b038116610e4b5760405162461bcd60e51b815260040161066790613a66565b610b3882611e05565b6000610cfb611b7b565b600060026000541415610e835760405162461bcd60e51b815260040161066790613ae4565b600260005560015462010000900460ff1615610eb15760405162461bcd60e51b815260040161066790613a8f565b60008481526009602090815260408083206001600160a01b038b1684529091529020548790859060ff16610ef75760405162461bcd60e51b8152600401610667906139ec565b7f0000000000000000000000000000000000000000000000000000000000000000861415610f635760405162461bcd60e51b815260206004820152601960248201527821b0b73737ba1039bbb0b8103a379039b2b6331031b430b4b760391b6044820152606401610667565b60008711610f835760405162461bcd60e51b815260040161066790613b1b565b6040516370a0823160e01b815233600482015287906001600160a01b038b16906370a082319060240160206040518083038186803b158015610fc457600080fd5b505afa158015610fd8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ffc919061362b565b101561104a5760405162461bcd60e51b815260206004820152601a60248201527f496e73756666696369656e7420746f6b656e2062616c616e63650000000000006044820152606401610667565b6001600160a01b03891660009081526008602052604090205460ff16156110d05760405163079cc67960e41b8152336004820152602481018890526001600160a01b038a16906379cc679090604401600060405180830381600087803b1580156110b357600080fd5b505af11580156110c7573d6000803e3d6000fd5b505050506110dc565b6110dc8933308a611e59565b6110e7338988611b0a565b9250857f00000000000000000000000000000000000000000000000000000000000000007fca1cf8cebf88499429cca8f87cbca15ab8dafd06702259a5344ddce89ef3f3a5856111368d611ad4565b61113f8f611ad4565b8d8d8c8c604051611156979695949392919061390f565b60405180910390a350506001600055979650505050505050565b600154610100900460ff1661118b5760015460ff161561118f565b303b155b6111f25760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610667565b600154610100900460ff16158015611214576001805461ffff19166101011790555b836001600160a01b03811661123b5760405162461bcd60e51b815260040161066790613a66565b836001600160a01b0381166112625760405162461bcd60e51b815260040161066790613a66565b836001600160a01b0381166112895760405162461bcd60e51b815260040161066790613a66565b600380546001600160a01b03808a166001600160a01b03199283161790925560068054928916929091169190911790556112c285611e05565b50505080156112d7576001805461ff00191690555b50505050565b6112e5611aa1565b6001600160a01b0316336001600160a01b0316146113155760405162461bcd60e51b815260040161066790613ab9565b60005b815181101561137d5760016008600084848151811061133957611339613d3b565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790558061137581613d0a565b915050611318565b507fdacfd802eca1f2a9d9a6e78cf204ab0fe040a4ba3a8a00a66872d18658b61e5a816040516107089190613835565b600260005414156113d05760405162461bcd60e51b815260040161066790613ae4565b600260005560015462010000900460ff16156113fe5760405162461bcd60e51b815260040161066790613a8f565b60055482146114425760405162461bcd60e51b815260206004820152601060248201526f1a5b9d985b1a590818da185a5b881a5960821b6044820152606401610667565b60065460405163016dc52760e41b8152600091829182916001600160a01b0316906316dc52709061147790879060040161398d565b60006040518083038186803b15801561148f57600080fd5b505afa1580156114a3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114cb9190810190613585565b9250925092508282906114f15760405162461bcd60e51b8152600401610667919061398d565b5060006114fd82611ec4565b905060005b81518110156115fb57600082828151811061151f5761151f613d3b565b602002602001015190506000816020015160008151811061154257611542613d3b565b602002602001015180602001905181019061155d919061362b565b9050604051806080016040528060438152602001613d9d60439139805190602001208114801561159c575081516004546001600160a01b039081169116145b156115e65760006115ac83612154565b91505080602001517f000000000000000000000000000000000000000000000000000000000000000014156115e4576115e48161225b565b505b505080806115f390613d0a565b915050611502565b5060405133907f00000000000000000000000000000000000000000000000000000000000000009088907f8131e5b107f7021b0773c1108755872d7b94bb31532fdf2256e0a3ef2c890a3d90600090a45050600160005550505050565b611660611aa1565b6001600160a01b0316336001600160a01b0316146116905760405162461bcd60e51b815260040161066790613ab9565b610d40612558565b6000600260005414156116bd5760405162461bcd60e51b815260040161066790613ae4565b600260005560015462010000900460ff16156116eb5760405162461bcd60e51b815260040161066790613a8f565b60035460008581526009602090815260408083206001600160a01b0390941680845293909152902054859060ff166117355760405162461bcd60e51b8152600401610667906139ec565b7f00000000000000000000000000000000000000000000000000000000000000008614156117a15760405162461bcd60e51b815260206004820152601960248201527821b0b73737ba1039bbb0b8103a379039b2b6331031b430b4b760391b6044820152606401610667565b34806117bf5760405162461bcd60e51b815260040161066790613b1b565b600360009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561180f57600080fd5b505af1158015611823573d6000803e3d6000fd5b5050505050611833338989611b0a565b60035490945087907f0000000000000000000000000000000000000000000000000000000000000000907fca1cf8cebf88499429cca8f87cbca15ab8dafd06702259a5344ddce89ef3f3a5908790611893906001600160a01b0316611ad4565b61189c8e611ad4565b8d878d8d6040516118b3979695949392919061390f565b60405180910390a3505060016000555095945050505050565b600260005414156118ef5760405162461bcd60e51b815260040161066790613ae4565b600260005560015462010000900460ff161561191d5760405162461bcd60e51b815260040161066790613a8f565b60055460008181526009602090815260408083206001600160a01b038816845290915290205484919060ff166119655760405162461bcd60e51b8152600401610667906139ec565b33836119835760405162461bcd60e51b815260040161066790613b1b565b6001600160a01b03861660009081526008602052604090205460ff1615611a0b5760405163079cc67960e41b81526001600160a01b038281166004830152602482018690528716906379cc679090604401600060405180830381600087803b1580156119ee57600080fd5b505af1158015611a02573d6000803e3d6000fd5b50505050611a17565b611a1786823087611e59565b6000611a268261080a88611ad4565b90506005547f00000000000000000000000000000000000000000000000000000000000000007fb7100086a8e13ebae772a0f09b07046e389a6b036406d22b86f2d2e5b860a8d9838a611a7887611ad4565b8b8b604051611a8b959493929190613882565b60405180910390a3505060016000555050505050565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b604051606082811b6bffffffffffffffffffffffff19166020830152906034016040516020818303038152906040529050919050565b6002805460009130919083611b1e83613d0a565b919050557f0000000000000000000000000000000000000000000000000000000000000000848787604051602001611b5b9695949392919061378a565b6040516020818303038152906040528051906020012090505b9392505050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc611ac5565b611bab611aa1565b6001600160a01b0316336001600160a01b0316146109cb5760405162461bcd60e51b815260206004820152602b60248201527f4d41504f6d6e69636861696e536572766963653a206f6e6c792041646d696e2060448201526a63616e207570677261646560a81b6064820152608401610667565b6000611c29611b7b565b9050611c34846125ba565b600083511180611c415750815b15611c5257611c508484612662565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff16611d6357805460ff191660011781556040516001600160a01b0383166024820152611cd190869060440160408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b179052612662565b50805460ff19168155611ce2611b7b565b6001600160a01b0316826001600160a01b031614611d5a5760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b6064820152608401610667565b611d6385612687565b5050505050565b60015462010000900460ff16611db95760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610667565b6001805462ff0000191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f611e2e611aa1565b604080516001600160a01b03928316815291841660208301520160405180910390a16109cb816126c7565b6040516001600160a01b03808516602483015283166044820152606481018290526112d79085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612753565b60606000611f01611efc8460408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b61282a565b905080516001600160401b03811115611f1c57611f1c613d51565b604051908082528060200260200182016040528015611f7a57816020015b611f67604051806060016040528060006001600160a01b0316815260200160608152602001606081525090565b815260200190600190039081611f3a5790505b50915060005b815181101561214d576000611fad838381518110611fa057611fa0613d3b565b602002602001015161282a565b9050600381511015611ff55760405162461bcd60e51b81526020600482015260116024820152706c6f67206c656e67746820746f206c6f7760781b6044820152606401610667565b600061200d82600181518110611fa057611fa0613d3b565b9050600081516001600160401b0381111561202a5761202a613d51565b60405190808252806020026020018201604052801561205d57816020015b60608152602001906001900390816120485790505b50905060005b82518110156120be5761208e83828151811061208157612081613d3b565b6020026020010151612971565b8282815181106120a0576120a0613d3b565b602002602001018190525080806120b690613d0a565b915050612063565b5060405180606001604052806120ed856000815181106120e0576120e0613d3b565b6020026020010151612a24565b6001600160a01b031681526020018281526020016121178560028151811061208157612081613d3b565b81525086858151811061212c5761212c613d3b565b6020026020010181905250505050808061214590613d0a565b915050611f80565b5050919050565b60606121a160405180610100016040528060008152602001600081526020016000801916815260200160608152602001606081526020016060815260200160008152602001606081525090565b82516121ac90611ad4565b915082602001516001815181106121c5576121c5613d3b565b60200260200101518060200190518101906121e0919061362b565b81526020830151805160029081106121fa576121fa613d3b565b6020026020010151806020019051810190612215919061362b565b81602001818152505082604001518060200190518101906122369190613644565b60e087015260c086015260a08501526080840152606083015260408201529092909150565b60408082015160008181526007602052919091205460ff16156122ae5760405162461bcd60e51b815260206004820152600b60248201526a1bdc99195c88195e1a5cdd60aa1b6044820152606401610667565b6000818152600760205260408120805460ff1916600117905560608301516122d7906014015190565b905060006122ea8460a001516014015190565b60c0850151909150612314836001600160a01b031660009081526008602052604090205460ff1690565b1561237a576040516340c10f1960e01b8152306004820152602481018290526001600160a01b038416906340c10f1990604401600060405180830381600087803b15801561236157600080fd5b505af1158015612375573d6000803e3d6000fd5b505050505b60e0850151511561245757600a5461239d9084906001600160a01b031683612a76565b600a546040808701518751608089015160e08a015193516000956001600160a01b0316946123d694938a938993919290916024016138bd565b60408051601f198184030181529181526020820180516001600160e01b0316633af61ed560e21b1790525161240b91906137e5565b6000604051808303816000865af19150503d8060008114612448576040519150601f19603f3d011682016040523d82523d6000602084013e61244d565b606091505b50509050506124e5565b6003546001600160a01b03848116911614156124da57600354604051632e1a7d4d60e01b8152600481018390526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b1580156124b357600080fd5b505af11580156124c7573d6000803e3d6000fd5b505050506124d58282612aa6565b6124e5565b6124e5838383612a76565b84604001517f000000000000000000000000000000000000000000000000000000000000000086600001517f2a945137b011d4aadec6425788c652197d107fc33f6cdccbb0c269273be9c1c986896080015187876040516125499493929190613801565b60405180910390a45050505050565b60015462010000900460ff16156125815760405162461bcd60e51b815260040161066790613a8f565b6001805462ff00001916620100001790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611de83390565b803b61261e5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610667565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5b80546001600160a01b0319166001600160a01b039290921691909117905550565b6060611b748383604051806060016040528060278152602001613d7660279139612bbf565b612690816125ba565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001600160a01b03811661272c5760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b6064820152608401610667565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103612641565b60006127a8826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612c939092919063ffffffff16565b80519091501561282557808060200190518101906127c69190613568565b6128255760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610667565b505050565b606061283582612caa565b6128705760405162461bcd60e51b815260206004820152600c60248201526b1a5cc81b1a5cdd0819985a5b60a21b6044820152606401610667565b600061287b83612ce3565b90506000816001600160401b0381111561289757612897613d51565b6040519080825280602002602001820160405280156128dc57816020015b60408051808201909152600080825260208201528152602001906001900390816128b55790505b50905060006128ee8560200151612d66565b85602001516128fd9190613ba1565b90506000805b848110156129665761291483612de1565b915060405180604001604052808381526020018481525084828151811061293d5761293d613d3b565b60209081029190910101526129528284613ba1565b92508061295e81613d0a565b915050612903565b509195945050505050565b80516060906129b55760405162461bcd60e51b815260206004820152601060248201526f6974656d206c656e206973207a65726f60801b6044820152606401610667565b6000806129c184612e8a565b915091506000816001600160401b038111156129df576129df613d51565b6040519080825280601f01601f191660200182016040528015612a09576020820181803683370190505b50905060208101612a1b848285612ed1565b50949350505050565b8051600090601514612a6d5760405162461bcd60e51b81526020600482015260126024820152716974656d206c656e206973206e6f7420323160701b6044820152606401610667565b61073a82612f50565b6040516001600160a01b03831660248201526044810182905261282590849063a9059cbb60e01b90606401611e8d565b80471015612af65760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610667565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612b43576040519150601f19603f3d011682016040523d82523d6000602084013e612b48565b606091505b50509050806128255760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610667565b6060833b612c1e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610667565b600080856001600160a01b031685604051612c3991906137e5565b600060405180830381855af49150503d8060008114612c74576040519150601f19603f3d011682016040523d82523d6000602084013e612c79565b606091505b5091509150612c89828286612fd7565b9695505050505050565b6060612ca28484600085613010565b949350505050565b8051600090612cbb57506000919050565b6020820151805160001a9060c0821015612cd9575060009392505050565b5060019392505050565b8051600090612cf457506000919050565b600080612d048460200151612d66565b8460200151612d139190613ba1565b9050600084600001518560200151612d2b9190613ba1565b90505b80821015612d5d57612d3f82612de1565b612d499083613ba1565b915082612d5581613d0a565b935050612d2e565b50909392505050565b8051600090811a6080811015612d7f5750600092915050565b60b8811080612d9a575060c08110801590612d9a575060f881105b15612da85750600192915050565b60c0811015612dd557612dbd600160b8613cbb565b612dca9060ff1682613ca4565b611b74906001613ba1565b612dbd600160f8613cbb565b80516000908190811a6080811015612dfc5760019150612e83565b60b8811015612e2257612e10608082613ca4565b612e1b906001613ba1565b9150612e83565b60c0811015612e4f5760b78103600185019450806020036101000a85510460018201810193505050612e83565b60f8811015612e6357612e1060c082613ca4565b60f78103600185019450806020036101000a855104600182018101935050505b5092915050565b6000806000612e9c8460200151612d66565b90506000818560200151612eb09190613ba1565b90506000828660000151612ec49190613ca4565b9196919550909350505050565b80612edb57505050565b60208110612f135782518252612ef2602084613ba1565b9250612eff602083613ba1565b9150612f0c602082613ca4565b9050612edb565b80156128255760006001612f28836020613ca4565b612f3490610100613bfc565b612f3e9190613ca4565b84518451821691191617835250505050565b805160009015801590612f6557508151602110155b612fa85760405162461bcd60e51b81526020600482015260146024820152731a5d195b481b195b881a5cc81b9bdd081d5a5b9d60621b6044820152606401610667565b600080612fb484612e8a565b815191935091506020821015612ca25760208290036101000a9004949350505050565b60608315612fe6575081611b74565b825115612ff65782518084602001fd5b8160405162461bcd60e51b8152600401610667919061398d565b6060824710156130715760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610667565b843b6130bf5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610667565b600080866001600160a01b031685876040516130db91906137e5565b60006040518083038185875af1925050503d8060008114613118576040519150601f19603f3d011682016040523d82523d6000602084013e61311d565b606091505b509150915061312d828286612fd7565b979650505050505050565b600061314b61314684613b7a565b613b4a565b905082815283838301111561315f57600080fd5b611b74836020830184613cde565b80356001600160a01b038116811461318457600080fd5b919050565b60008083601f84011261319b57600080fd5b5081356001600160401b038111156131b257600080fd5b6020830191508360208285010111156131ca57600080fd5b9250929050565b600082601f8301126131e257600080fd5b81356131f061314682613b7a565b81815284602083860101111561320557600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f83011261323357600080fd5b611b7483835160208501613138565b60006020828403121561325457600080fd5b611b748261316d565b60008060006060848603121561327257600080fd5b61327b8461316d565b92506132896020850161316d565b91506132976040850161316d565b90509250925092565b600080600080600080600060c0888a0312156132bb57600080fd5b6132c48861316d565b96506132d26020890161316d565b955060408801356001600160401b03808211156132ee57600080fd5b6132fa8b838c016131d1565b965060608a0135955060808a0135945060a08a013591508082111561331e57600080fd5b5061332b8a828b01613189565b989b979a50959850939692959293505050565b60008060006060848603121561335357600080fd5b61335c8461316d565b925061336a6020850161316d565b9150604084013590509250925092565b6000806040838503121561338d57600080fd5b6133968361316d565b915060208301356001600160401b038111156133b157600080fd5b6133bd858286016131d1565b9150509250929050565b6000806000806000608086880312156133df57600080fd5b6133e88661316d565b945060208601356001600160401b038082111561340457600080fd5b61341089838a016131d1565b955060408801359450606088013591508082111561342d57600080fd5b5061343a88828901613189565b969995985093965092949392505050565b6000806040838503121561345e57600080fd5b6134678361316d565b946020939093013593505050565b60008060006060848603121561348a57600080fd5b6134938461316d565b92506020840135915060408401356134aa81613d67565b809150509250925092565b600060208083850312156134c857600080fd5b82356001600160401b03808211156134df57600080fd5b818501915085601f8301126134f357600080fd5b81358181111561350557613505613d51565b8060051b9150613516848301613b4a565b8181528481019084860184860187018a101561353157600080fd5b600095505b8386101561355b576135478161316d565b835260019590950194918601918601613536565b5098975050505050505050565b60006020828403121561357a57600080fd5b8151611b7481613d67565b60008060006060848603121561359a57600080fd5b83516135a581613d67565b60208501519093506001600160401b03808211156135c257600080fd5b818601915086601f8301126135d657600080fd5b6135e587835160208501613138565b935060408601519150808211156135fb57600080fd5b5061360886828701613222565b9150509250925092565b60006020828403121561362457600080fd5b5035919050565b60006020828403121561363d57600080fd5b5051919050565b60008060008060008060c0878903121561365d57600080fd5b8651955060208701516001600160401b038082111561367b57600080fd5b6136878a838b01613222565b9650604089015191508082111561369d57600080fd5b6136a98a838b01613222565b955060608901519150808211156136bf57600080fd5b6136cb8a838b01613222565b94506080890151935060a08901519150808211156136e857600080fd5b506136f589828a01613222565b9150509295509295509295565b6000806040838503121561371557600080fd5b823591506137256020840161316d565b90509250929050565b6000806040838503121561374157600080fd5b8235915060208301356001600160401b038111156133b157600080fd5b60008151808452613776816020860160208601613cde565b601f01601f19169290920160200192915050565b60006bffffffffffffffffffffffff19808960601b168352876014840152866034840152856054840152808560601b1660748401525082516137d3816088850160208701613cde565b91909101608801979650505050505050565b600082516137f7818460208701613cde565b9190910192915050565b600060018060a01b03808716835260806020840152613823608084018761375e565b94166040830152506060015292915050565b6020808252825182820181905260009190848201906040850190845b818110156138765783516001600160a01b031683529284019291840191600101613851565b50909695505050505050565b858152600060018060a01b03808716602084015260a060408401526138aa60a084018761375e565b9416606083015250608001529392505050565b86815260018060a01b038616602082015284604082015283606082015260c0608082015260006138f060c083018561375e565b82810360a0840152613902818561375e565b9998505050505050505050565b87815260c06020820152600061392860c083018961375e565b828103604084015261393a818961375e565b9050828103606084015261394e818861375e565b905085608084015282810360a0840152838152838560208301376000602085830101526020601f19601f86011682010191505098975050505050505050565b602081526000611b74602083018461375e565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252601490820152731d1bdad95b881b9bdd081c9959da5cdd195c995960621b604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252600f908201526e61646472657373206973207a65726f60881b604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60208082526011908201527036b7b9901d1d1037b7363c9030b236b4b760791b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526015908201527453656e64696e672076616c7565206973207a65726f60581b604082015260600190565b604051601f8201601f191681016001600160401b0381118282101715613b7257613b72613d51565b604052919050565b60006001600160401b03821115613b9357613b93613d51565b50601f01601f191660200190565b60008219821115613bb457613bb4613d25565b500190565b600181815b80851115613bf4578160001904821115613bda57613bda613d25565b80851615613be757918102915b93841c9390800290613bbe565b509250929050565b6000611b748383600082613c125750600161073a565b81613c1f5750600061073a565b8160018114613c355760028114613c3f57613c5b565b600191505061073a565b60ff841115613c5057613c50613d25565b50506001821b61073a565b5060208310610133831016604e8410600b8410161715613c7e575081810a61073a565b613c888383613bb9565b8060001904821115613c9c57613c9c613d25565b029392505050565b600082821015613cb657613cb6613d25565b500390565b600060ff821660ff841680821015613cd557613cd5613d25565b90039392505050565b60005b83811015613cf9578181015183820152602001613ce1565b838111156112d75750506000910152565b6000600019821415613d1e57613d1e613d25565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b80151581146109cb57600080fdfe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c65646d6170537761704f75742875696e743235362c75696e743235362c627974657333322c62797465732c62797465732c62797465732c75696e743235362c627974657329a2646970667358221220eba4e357c77f06f17912f25fc2df02e9f6be13d44da07cd7763322eff0037bbb64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2810,
        "contract": "contracts/MAPOmnichainServiceV2.sol:MAPOmnichainServiceV2",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 2554,
        "contract": "contracts/MAPOmnichainServiceV2.sol:MAPOmnichainServiceV2",
        "label": "_initialized",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 2557,
        "contract": "contracts/MAPOmnichainServiceV2.sol:MAPOmnichainServiceV2",
        "label": "_initializing",
        "offset": 1,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 2725,
        "contract": "contracts/MAPOmnichainServiceV2.sol:MAPOmnichainServiceV2",
        "label": "_paused",
        "offset": 2,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 7897,
        "contract": "contracts/MAPOmnichainServiceV2.sol:MAPOmnichainServiceV2",
        "label": "nonce",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 7899,
        "contract": "contracts/MAPOmnichainServiceV2.sol:MAPOmnichainServiceV2",
        "label": "wToken",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 7901,
        "contract": "contracts/MAPOmnichainServiceV2.sol:MAPOmnichainServiceV2",
        "label": "relayContract",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 7903,
        "contract": "contracts/MAPOmnichainServiceV2.sol:MAPOmnichainServiceV2",
        "label": "relayChainId",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 7906,
        "contract": "contracts/MAPOmnichainServiceV2.sol:MAPOmnichainServiceV2",
        "label": "lightNode",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(ILightNode)93"
      },
      {
        "astId": 7914,
        "contract": "contracts/MAPOmnichainServiceV2.sol:MAPOmnichainServiceV2",
        "label": "orderList",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 7918,
        "contract": "contracts/MAPOmnichainServiceV2.sol:MAPOmnichainServiceV2",
        "label": "mintableTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7924,
        "contract": "contracts/MAPOmnichainServiceV2.sol:MAPOmnichainServiceV2",
        "label": "tokenMappingList",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 7926,
        "contract": "contracts/MAPOmnichainServiceV2.sol:MAPOmnichainServiceV2",
        "label": "butterRouter",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ILightNode)93": {
        "encoding": "inplace",
        "label": "contract ILightNode",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}